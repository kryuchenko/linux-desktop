diff --git a/.github/workflows/docker-build.yml b/.github/workflows/docker-build.yml
index 81f893c..9ba2c00 100644
--- a/.github/workflows/docker-build.yml
+++ b/.github/workflows/docker-build.yml
@@ -2,8 +2,8 @@ name: Docker Build
 
 on:
   workflow_dispatch:
-  #push:
-  #  branches: [ "main" ]
+  push:
+    branches: [ "main" ]
     
 env:
   UBUNTU_VERSION: 22.04
@@ -16,7 +16,8 @@ jobs:
       fail-fast: false
       matrix:
         build:
-          - {latest: "false", selkies: "1.6.2"}
+          - {latest: "false", selkies: "1.6.2", proton: "false"}
+          - {latest: "false", selkies: "1.6.2", proton: "true"}
     steps:
       -
         name: Free Space
@@ -45,8 +46,8 @@ jobs:
         name: Login to DockerHub
         uses: docker/login-action@v3
         with:
-          username: ${{ vars.DOCKERHUB_USER }}
-          password: ${{ secrets.DOCKERHUB_TOKEN }}
+          username: ${{ secrets.DOCKERHUB_USER }}
+          password: ${{ secrets.DOCKER_PASSWORD }}
       -
         name: Login to GitHub Container Registry
         uses: docker/login-action@v3
@@ -58,7 +59,7 @@ jobs:
         name: Set tags
         run: |
           img_path_ghcr="ghcr.io/${{ env.REPO_NAMESPACE }}/${{ env.REPO_NAME }}"
-          img_path_dhub="${{ vars.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-cpu"
+          img_path_dhub="${{ secrets.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-cpu$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
           
           if [[ -z ${{ matrix.build.selkies }} || ${{ matrix.build.selkies }} == "latest"  ]]; then
               SELKIES_VERSION="$(curl -fsSL "https://api.github.com/repos/selkies-project/selkies-gstreamer/releases/latest" | jq -r '.tag_name' | sed 's/[^0-9\.\-]*//g')"
@@ -68,12 +69,12 @@ jobs:
           [[ -n $SELKIES_VERSION ]] || { echo "Error: SELKIES_VERSION is empty. Exiting script." >&2; exit 1; }
           echo "SELKIES_VERSION=${SELKIES_VERSION}" >> ${GITHUB_ENV}
 
-          base_tag="v2-cpu-${{ env.UBUNTU_VERSION }}"
+          base_tag="v2-cpu-${{ env.UBUNTU_VERSION }}$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
 
           if [[ ${{ matrix.build.latest }} == "true" ]]; then
                 echo "Marking latest"
                 # GHCR.io Tags
-                TAGS="${img_path_ghcr}:${base_tag}, ${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest-cpu"
+                TAGS="${img_path_ghcr}:${base_tag}, ${img_path_ghcr}:${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest-cpu$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
                 # Docker.io Tags
                 TAGS="${TAGS}, ${img_path_dhub}:${SELKIES_VERSION}-ubuntu-${{ env.UBUNTU_VERSION }}, ${img_path_dhub}:latest"
             else
@@ -87,6 +88,8 @@ jobs:
           context: build
           build-args: |
             IMAGE_BASE=ghcr.io/ai-dock/base-image:v2-cpu-${{ env.UBUNTU_VERSION }}
+            ENABLE_PROTON_GE=${{ matrix.build.proton }}
+            SELKIES_VERSION=${{ env.SELKIES_VERSION }}
           push: true
           # Avoids unknown/unknown architecture and extra metadata
           provenance: false
@@ -98,8 +101,10 @@ jobs:
       fail-fast: false
       matrix:
         build:
-          - {latest: "false", selkies: "1.6.2", cuda: "12.1.1-cudnn8-runtime"}
-          - {latest: "false", selkies: "1.6.2", cuda: "12.1.1-cudnn8-devel"}
+          - {latest: "false", selkies: "1.6.2", cuda: "12.1.1-cudnn8-runtime", proton: "false"}
+          - {latest: "false", selkies: "1.6.2", cuda: "12.1.1-cudnn8-runtime", proton: "true"}
+          # Devel builds commented due to size constraints
+          #- {latest: "false", selkies: "1.6.2", cuda: "12.1.1-cudnn8-devel", proton: "false"}
     steps:
       -
         name: Free Space
@@ -128,8 +133,8 @@ jobs:
         name: Login to DockerHub
         uses: docker/login-action@v3
         with:
-          username: ${{ vars.DOCKERHUB_USER }}
-          password: ${{ secrets.DOCKERHUB_TOKEN }}
+          username: ${{ secrets.DOCKERHUB_USER }}
+          password: ${{ secrets.DOCKER_PASSWORD }}
       -
         name: Login to GitHub Container Registry
         uses: docker/login-action@v3
@@ -141,7 +146,7 @@ jobs:
         name: Set tags
         run: |
           img_path_ghcr="ghcr.io/${{ env.REPO_NAMESPACE }}/${{ env.REPO_NAME }}"
-          img_path_dhub="${{ vars.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-cuda"
+          img_path_dhub="${{ secrets.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-cuda$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
           
           if [[ -z ${{ matrix.build.selkies }} || ${{ matrix.build.selkies }} == "latest"  ]]; then
               SELKIES_VERSION="$(curl -fsSL "https://api.github.com/repos/selkies-project/selkies-gstreamer/releases/latest" | jq -r '.tag_name' | sed 's/[^0-9\.\-]*//g')"
@@ -151,12 +156,12 @@ jobs:
           [[ -n $SELKIES_VERSION ]] || { echo "Error: SELKIES_VERSION is empty. Exiting script." >&2; exit 1; }
           echo "SELKIES_VERSION=${SELKIES_VERSION}" >> ${GITHUB_ENV}
           
-          base_tag="v2-cuda-${{ matrix.build.cuda }}-${{ env.UBUNTU_VERSION }}"
+          base_tag="v2-cuda-${{ matrix.build.cuda }}-${{ env.UBUNTU_VERSION }}$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
 
           if [[ ${{ matrix.build.latest }} == "true" ]]; then
                 echo "Marking latest"
                 # GHCR.io Tags
-                TAGS="${img_path_ghcr}:${base_tag}, ${img_path_ghcr}:${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest, ${img_path_ghcr}:latest-cuda"
+                TAGS="${img_path_ghcr}:${base_tag}, ${img_path_ghcr}:${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo ""), ${img_path_ghcr}:latest-cuda$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
                 # Docker.io Tags
                 TAGS="${TAGS}, ${img_path_dhub}:v${SELKIES_VERSION}-${{ matrix.build.cuda }}, ${img_path_dhub}:latest"
             else
@@ -170,6 +175,8 @@ jobs:
           context: build
           build-args: |
             IMAGE_BASE=ghcr.io/ai-dock/base-image:v2-cuda-${{ matrix.build.cuda }}-${{ env.UBUNTU_VERSION }}
+            ENABLE_PROTON_GE=${{ matrix.build.proton }}
+            SELKIES_VERSION=${{ env.SELKIES_VERSION }}
           push: true
           provenance: false
           tags: ${{ env.TAGS }}
@@ -180,7 +187,9 @@ jobs:
       fail-fast: false
       matrix:
         build:
-          - {latest: "false", selkies: "1.6.2", rocm: "6.0-runtime"}
+          - {latest: "false", selkies: "1.6.2", rocm: "6.0-runtime", proton: "false"}
+          # ROCm with Proton commented due to size constraints
+          #- {latest: "false", selkies: "1.6.2", rocm: "6.0-runtime", proton: "true"}
     steps:
       -
         name: Free Space
@@ -209,8 +218,8 @@ jobs:
         name: Login to DockerHub
         uses: docker/login-action@v3
         with:
-          username: ${{ vars.DOCKERHUB_USER }}
-          password: ${{ secrets.DOCKERHUB_TOKEN }}
+          username: ${{ secrets.DOCKERHUB_USER }}
+          password: ${{ secrets.DOCKER_PASSWORD }}
       -
         name: Login to GitHub Container Registry
         uses: docker/login-action@v3
@@ -222,7 +231,7 @@ jobs:
         name: Set tags
         run: |
           img_path_ghcr="ghcr.io/${{ env.REPO_NAMESPACE }}/${{ env.REPO_NAME }}"
-          img_path_dhub="${{ vars.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-rocm"
+          img_path_dhub="${{ secrets.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-rocm$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
           
           if [[ -z ${{ matrix.build.selkies }} || ${{ matrix.build.selkies }} == "latest"  ]]; then
               SELKIES_VERSION="$(curl -fsSL "https://api.github.com/repos/selkies-project/selkies-gstreamer/releases/latest" | jq -r '.tag_name' | sed 's/[^0-9\.\-]*//g')"
@@ -232,12 +241,12 @@ jobs:
           [[ -n $SELKIES_VERSION ]] || { echo "Error: SELKIES_VERSION is empty. Exiting script." >&2; exit 1; }
           echo "SELKIES_VERSION=${SELKIES_VERSION}" >> ${GITHUB_ENV}
 
-          base_tag="v2-cuda-${{ matrix.build.rocm }}-${{ env.UBUNTU_VERSION }}"
+          base_tag="v2-rocm-${{ matrix.build.rocm }}-${{ env.UBUNTU_VERSION }}$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
 
           if [[ ${{ matrix.build.latest }} == "true" ]]; then
                 echo "Marking latest"
                 # GHCR.io Tags
-                TAGS="${img_path_ghcr}:${base_tag}, ${img_path_ghcr}:${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest-rocm"
+                TAGS="${img_path_ghcr}:${base_tag}, ${img_path_ghcr}:${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest-rocm$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
                 # Docker.io Tags
                 TAGS="${TAGS}, ${img_path_dhub}:v${SELKIES_VERSION}-${{ matrix.build.rocm }}, ${img_path_dhub}:latest"
             else
@@ -251,6 +260,8 @@ jobs:
           context: build
           build-args: |
             IMAGE_BASE=ghcr.io/ai-dock/base-image:v2-rocm-${{ matrix.build.rocm }}-${{ env.UBUNTU_VERSION }}
+            ENABLE_PROTON_GE=${{ matrix.build.proton }}
+            SELKIES_VERSION=${{ env.SELKIES_VERSION }}
           push: true
           provenance: false
           tags: ${{ env.TAGS }}
diff --git a/build/COPY_ROOT_PROTON/etc/supervisor/supervisord.d/proton-services.conf b/build/COPY_ROOT_PROTON/etc/supervisor/supervisord.d/proton-services.conf
new file mode 100644
index 0000000..78474a9
--- /dev/null
+++ b/build/COPY_ROOT_PROTON/etc/supervisor/supervisord.d/proton-services.conf
@@ -0,0 +1,30 @@
+[program:proton-init]
+command=/opt/ai-dock/bin/proton-init.sh
+directory=/opt/ai-dock/bin
+autostart=true
+autorestart=false
+priority=900
+startsecs=0
+startretries=0
+stdout_logfile=/var/log/supervisor/proton-init.log
+stderr_logfile=/var/log/supervisor/proton-init.log
+stdout_logfile_maxbytes=10MB
+stderr_logfile_maxbytes=10MB
+stdout_logfile_backups=1
+stderr_logfile_backups=1
+user=%(ENV_WORKSPACE_USER)s
+
+[program:gamemode]
+command=/usr/bin/gamemoded -F
+directory=/
+autostart=%(ENV_ENABLE_GAMEMODE)s
+autorestart=true
+priority=950
+stdout_logfile=/var/log/supervisor/gamemode.log
+stderr_logfile=/var/log/supervisor/gamemode.log
+stdout_logfile_maxbytes=10MB
+stderr_logfile_maxbytes=10MB
+stdout_logfile_backups=1
+stderr_logfile_backups=1
+user=%(ENV_WORKSPACE_USER)s
+environment=HOME="%(ENV_WORKSPACE)s"
\ No newline at end of file
diff --git a/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_gaming_utils.sh b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_gaming_utils.sh
new file mode 100755
index 0000000..efa7fa0
--- /dev/null
+++ b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_gaming_utils.sh
@@ -0,0 +1,95 @@
+#!/bin/bash
+# Install additional gaming utilities
+# GameMode, MangoHud, and other tools for optimal gaming experience
+
+set -e
+
+function install_gaming_utils() {
+    echo "Installing gaming utilities..."
+    
+    # Add required PPAs for latest versions
+    add-apt-repository -y ppa:oibaf/graphics-drivers || true
+    apt-get update
+    
+    # Install GameMode for performance optimization
+    apt-get install -y --no-install-recommends \
+        gamemode \
+        gamemode-daemon \
+        libgamemode0 \
+        libgamemodeauto0
+    
+    # Install MangoHud for performance monitoring
+    apt-get install -y --no-install-recommends \
+        mangohud \
+        mangohud:i386
+    
+    # Install additional utilities
+    apt-get install -y --no-install-recommends \
+        cabextract \
+        unzip \
+        p7zip-full \
+        dos2unix \
+        zenity \
+        xdotool \
+        yad
+    
+    # Install media codecs for cutscenes
+    apt-get install -y --no-install-recommends \
+        ffmpeg \
+        gstreamer1.0-libav \
+        gstreamer1.0-plugins-ugly \
+        gstreamer1.0-vaapi
+    
+    # Create MangoHud config directory
+    mkdir -p /etc/mangohud
+    
+    # Create default MangoHud configuration
+    cat > /etc/mangohud/MangoHud.conf << 'EOF'
+# Default MangoHud configuration for Proton GE
+cpu_temp
+gpu_temp
+ram
+vram
+frametime
+position=top-right
+toggle_hud=F12
+toggle_fps_limit=F11
+fps_limit=0,60,144
+font_size=24
+no_display_battery
+background_alpha=0.5
+EOF
+    
+    # Create GameMode configuration
+    mkdir -p /etc/gamemode.d
+    cat > /etc/gamemode.d/gamemode.ini << 'EOF'
+[general]
+; GameMode configuration for optimal performance
+reaper_freq=5
+desiredgov=performance
+igpu_desiredgov=performance
+igpu_power_threshold=0.3
+min_core_perf=0
+
+[custom]
+; Custom scripts can be added here
+start=notify-send "GameMode started"
+end=notify-send "GameMode stopped"
+
+[gpu]
+; GPU performance settings
+apply_gpu_optimisations=accept-responsibility
+gpu_device=0
+amd_performance_level=high
+EOF
+    
+    # Create symlink for gamemoderun
+    if [ -f /usr/games/gamemoderun ]; then
+        ln -sf /usr/games/gamemoderun /usr/local/bin/gamemoderun
+    fi
+    
+    echo "Gaming utilities installed successfully"
+}
+
+# Execute installation
+install_gaming_utils
\ No newline at end of file
diff --git a/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_proton_base.sh b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_proton_base.sh
new file mode 100755
index 0000000..c19eb43
--- /dev/null
+++ b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_proton_base.sh
@@ -0,0 +1,63 @@
+#!/bin/bash
+# Install base Proton/Wine dependencies
+# This script installs Wine staging and required 32-bit libraries
+
+set -e
+
+function install_proton_base() {
+    echo "Installing Proton base dependencies..."
+    
+    # Enable 32-bit architecture
+    dpkg --add-architecture i386
+    apt-get update
+    
+    # Add Wine repository
+    wget -nc https://dl.winehq.org/wine-builds/winehq.key -O /tmp/winehq.key
+    apt-key add /tmp/winehq.key
+    rm -f /tmp/winehq.key
+    
+    # Add Wine repository for Ubuntu 22.04 (jammy)
+    add-apt-repository 'deb https://dl.winehq.org/wine-builds/ubuntu/ jammy main'
+    apt-get update
+    
+    # Install Wine staging (includes both 32 and 64-bit)
+    apt-get install -y --no-install-recommends \
+        winehq-staging \
+        wine-staging \
+        wine-staging-i386 \
+        wine-staging-amd64
+    
+    # Install essential 32-bit libraries for gaming
+    apt-get install -y --no-install-recommends \
+        libgnutls30:i386 \
+        libldap-2.4-2:i386 \
+        libgpg-error0:i386 \
+        libxml2:i386 \
+        libasound2-plugins:i386 \
+        libsdl2-2.0-0:i386 \
+        libfreetype6:i386 \
+        libdbus-1-3:i386 \
+        libsqlite3-0:i386 \
+        libglu1-mesa:i386 \
+        libglu1-mesa \
+        libgles2-mesa:i386 \
+        libosmesa6:i386 \
+        libncurses5:i386 \
+        libncurses6:i386
+    
+    # Additional libraries for better compatibility
+    apt-get install -y --no-install-recommends \
+        libfaudio0:i386 \
+        libgstreamer1.0-0:i386 \
+        libgstreamer-plugins-base1.0-0:i386 \
+        gstreamer1.0-plugins-good:i386 \
+        gstreamer1.0-plugins-bad:i386 \
+        gstreamer1.0-plugins-ugly:i386 \
+        libvkd3d1:i386 \
+        libvkd3d1
+    
+    echo "Proton base dependencies installed successfully"
+}
+
+# Execute installation
+install_proton_base
\ No newline at end of file
diff --git a/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_proton_ge.sh b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_proton_ge.sh
new file mode 100755
index 0000000..856e157
--- /dev/null
+++ b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_proton_ge.sh
@@ -0,0 +1,60 @@
+#!/bin/bash
+# Download and install Proton GE 10-3
+# This script installs Proton GE for system-wide use
+
+set -e
+
+PROTON_GE_VERSION="GE-Proton10-3"
+PROTON_DIR="/opt/proton-ge"
+STEAM_COMPAT_DIR="/opt/steam/compatibilitytools.d"
+
+function install_proton_ge() {
+    echo "Installing Proton GE ${PROTON_GE_VERSION}..."
+    
+    # Create directories
+    mkdir -p ${PROTON_DIR}
+    mkdir -p ${STEAM_COMPAT_DIR}
+    
+    # Download Proton GE
+    cd /tmp
+    echo "Downloading Proton GE ${PROTON_GE_VERSION}..."
+    wget -q --show-progress https://github.com/GloriousEggroll/proton-ge-custom/releases/download/${PROTON_GE_VERSION}/${PROTON_GE_VERSION}.tar.gz
+    
+    # Extract to Steam compatibility tools directory
+    echo "Extracting Proton GE..."
+    tar -xzf ${PROTON_GE_VERSION}.tar.gz -C ${STEAM_COMPAT_DIR}
+    
+    # Create symlink for system-wide access
+    ln -sf ${STEAM_COMPAT_DIR}/${PROTON_GE_VERSION} ${PROTON_DIR}/current
+    
+    # Set permissions
+    chmod -R 755 ${STEAM_COMPAT_DIR}/${PROTON_GE_VERSION}
+    
+    # Create wrapper scripts for easier access
+    mkdir -p /usr/local/bin
+    
+    # Create proton wrapper
+    cat > /usr/local/bin/proton << 'EOF'
+#!/bin/bash
+export STEAM_COMPAT_CLIENT_INSTALL_PATH="${STEAM_COMPAT_CLIENT_INSTALL_PATH:-/opt/steam}"
+export STEAM_COMPAT_DATA_PATH="${STEAM_COMPAT_DATA_PATH:-/workspace/.proton}"
+exec /opt/proton-ge/current/proton "$@"
+EOF
+    chmod +x /usr/local/bin/proton
+    
+    # Create wine wrapper using Proton's wine
+    cat > /usr/local/bin/proton-wine << 'EOF'
+#!/bin/bash
+export WINEPREFIX="${WINEPREFIX:-/workspace/.wine-proton}"
+exec /opt/proton-ge/current/files/bin/wine "$@"
+EOF
+    chmod +x /usr/local/bin/proton-wine
+    
+    # Clean up
+    rm -f /tmp/${PROTON_GE_VERSION}.tar.gz
+    
+    echo "Proton GE ${PROTON_GE_VERSION} installed successfully"
+}
+
+# Execute installation
+install_proton_ge
\ No newline at end of file
diff --git a/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_python_deps.sh b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_python_deps.sh
new file mode 100755
index 0000000..8c1d76e
--- /dev/null
+++ b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_python_deps.sh
@@ -0,0 +1,52 @@
+#!/bin/bash
+# Install Python dependencies for Proton/Wine tools
+# Uses virtual environment to avoid conflicts with AI/ML stack
+
+set -e
+
+function install_python_deps() {
+    echo "Installing Python dependencies for Proton tools..."
+    
+    # Ensure python3-venv is installed
+    apt-get install -y --no-install-recommends python3-venv
+    
+    # Create virtual environment for Proton tools
+    python3 -m venv /opt/proton-tools
+    
+    # Activate virtual environment and install packages
+    source /opt/proton-tools/bin/activate
+    
+    # Upgrade pip
+    pip install --upgrade pip
+    
+    # Install gaming-related Python tools
+    pip install --no-cache-dir \
+        protontricks==1.12.0 \
+        "websockets<14.0" \
+        vdf \
+        pyxdg
+    
+    # Deactivate virtual environment
+    deactivate
+    
+    # Create system-wide wrapper for protontricks
+    cat > /usr/local/bin/protontricks << 'EOF'
+#!/bin/bash
+source /opt/proton-tools/bin/activate
+exec python3 -m protontricks "$@"
+EOF
+    chmod +x /usr/local/bin/protontricks
+    
+    # Create wrapper for other Python tools if needed
+    cat > /usr/local/bin/proton-python << 'EOF'
+#!/bin/bash
+source /opt/proton-tools/bin/activate
+exec python3 "$@"
+EOF
+    chmod +x /usr/local/bin/proton-python
+    
+    echo "Python dependencies installed successfully"
+}
+
+# Execute installation
+install_python_deps
\ No newline at end of file
diff --git a/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/update-mime-database.sh b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/update-mime-database.sh
new file mode 100755
index 0000000..37acb57
--- /dev/null
+++ b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/update-mime-database.sh
@@ -0,0 +1,39 @@
+#!/bin/bash
+# Update MIME database and desktop file associations
+# This script should be run after Proton installation
+
+set -e
+
+function update_mime_associations() {
+    echo "Updating MIME database and file associations..."
+    
+    # Update MIME database
+    if command -v update-mime-database &> /dev/null; then
+        update-mime-database /usr/share/mime
+    fi
+    
+    # Update desktop database
+    if command -v update-desktop-database &> /dev/null; then
+        update-desktop-database /usr/share/applications
+    fi
+    
+    # Set default application for Windows executables
+    if command -v xdg-mime &> /dev/null; then
+        xdg-mime default proton-run.desktop application/x-wine-extension-msp
+        xdg-mime default proton-run.desktop application/x-msi
+        xdg-mime default proton-run.desktop application/x-msdos-program
+        xdg-mime default proton-run.desktop application/x-msdownload
+        xdg-mime default proton-run.desktop application/x-exe
+        xdg-mime default proton-run.desktop application/x-bat
+    fi
+    
+    # Update KDE file associations cache
+    if command -v kbuildsycoca5 &> /dev/null; then
+        kbuildsycoca5 --noincremental
+    fi
+    
+    echo "MIME associations updated successfully"
+}
+
+# Execute update
+update_mime_associations
\ No newline at end of file
diff --git a/build/COPY_ROOT_PROTON/opt/ai-dock/bin/proton-init.sh b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/proton-init.sh
new file mode 100755
index 0000000..e8e8866
--- /dev/null
+++ b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/proton-init.sh
@@ -0,0 +1,82 @@
+#!/bin/bash
+# Initialize Proton GE environment
+# Sets up environment variables and creates necessary directories
+
+set -e
+
+# Source environment if available
+[[ -f /opt/ai-dock/etc/environment.sh ]] && source /opt/ai-dock/etc/environment.sh
+
+# Setup Proton environment variables
+export PROTON_DIR="/opt/proton-ge/current"
+export PATH="${PROTON_DIR}/files/bin:${PATH}"
+export WINE="${PROTON_DIR}/files/bin/wine"
+export WINEPREFIX="${WINEPREFIX:-${WORKSPACE}/.wine}"
+export WINEDLLOVERRIDES="winemenubuilder.exe=d"
+export WINEARCH="win64"
+
+# Setup Vulkan ICD paths for multi-vendor support
+export VK_ICD_FILENAMES="/usr/share/vulkan/icd.d/nvidia_icd.json:/usr/share/vulkan/icd.d/radeon_icd.x86_64.json:/usr/share/vulkan/icd.d/intel_icd.x86_64.json"
+export VK_LAYER_PATH="/usr/share/vulkan/explicit_layer.d:/usr/share/vulkan/implicit_layer.d"
+
+# Proton specific settings
+export PROTON_USE_WINED3D11=0
+export PROTON_NO_ESYNC=0
+export PROTON_NO_FSYNC=0
+export PROTON_HIDE_NVIDIA_GPU=0
+export PROTON_ENABLE_NVAPI=1
+
+# MangoHud configuration
+export MANGOHUD_CONFIG="cpu_temp,gpu_temp,ram,vram,frametime,position=top-right"
+export MANGOHUD_CONFIGFILE="/etc/mangohud/MangoHud.conf"
+
+# Create necessary directories
+mkdir -p "${WORKSPACE}/.wine"
+mkdir -p "${WORKSPACE}/.proton"
+mkdir -p "${WORKSPACE}/.local/share/Steam/compatibilitytools.d"
+mkdir -p "${WORKSPACE}/.config/MangoHud"
+
+# Link Proton GE to user's Steam directory if needed
+if [ ! -e "${WORKSPACE}/.local/share/Steam/compatibilitytools.d/GE-Proton10-3" ]; then
+    ln -sf /opt/steam/compatibilitytools.d/GE-Proton10-3 "${WORKSPACE}/.local/share/Steam/compatibilitytools.d/"
+fi
+
+# Copy MangoHud config to user directory if not exists
+if [ ! -f "${WORKSPACE}/.config/MangoHud/MangoHud.conf" ]; then
+    cp /etc/mangohud/MangoHud.conf "${WORKSPACE}/.config/MangoHud/"
+fi
+
+# Initialize wine prefix if it doesn't exist
+if [ ! -f "${WINEPREFIX}/system.reg" ]; then
+    echo "Initializing Wine prefix at ${WINEPREFIX}..."
+    ${WINE} wineboot -u
+fi
+
+# Set proper permissions
+chown -R ${WORKSPACE_USER}:${WORKSPACE_USER} "${WORKSPACE}/.wine" 2>/dev/null || true
+chown -R ${WORKSPACE_USER}:${WORKSPACE_USER} "${WORKSPACE}/.proton" 2>/dev/null || true
+chown -R ${WORKSPACE_USER}:${WORKSPACE_USER} "${WORKSPACE}/.local" 2>/dev/null || true
+chown -R ${WORKSPACE_USER}:${WORKSPACE_USER} "${WORKSPACE}/.config" 2>/dev/null || true
+
+# Write environment to file for other processes
+cat > /opt/ai-dock/etc/proton.env << EOF
+export PROTON_DIR="${PROTON_DIR}"
+export PATH="${PROTON_DIR}/files/bin:\${PATH}"
+export WINE="${WINE}"
+export WINEPREFIX="${WINEPREFIX}"
+export WINEDLLOVERRIDES="${WINEDLLOVERRIDES}"
+export WINEARCH="${WINEARCH}"
+export VK_ICD_FILENAMES="${VK_ICD_FILENAMES}"
+export VK_LAYER_PATH="${VK_LAYER_PATH}"
+export PROTON_USE_WINED3D11=${PROTON_USE_WINED3D11}
+export PROTON_NO_ESYNC=${PROTON_NO_ESYNC}
+export PROTON_NO_FSYNC=${PROTON_NO_FSYNC}
+export PROTON_HIDE_NVIDIA_GPU=${PROTON_HIDE_NVIDIA_GPU}
+export PROTON_ENABLE_NVAPI=${PROTON_ENABLE_NVAPI}
+export MANGOHUD_CONFIG="${MANGOHUD_CONFIG}"
+export MANGOHUD_CONFIGFILE="${MANGOHUD_CONFIGFILE}"
+EOF
+
+echo "Proton GE environment initialized successfully"
+echo "Wine prefix: ${WINEPREFIX}"
+echo "Proton version: $(${PROTON_DIR}/proton --version 2>/dev/null || echo 'GE-Proton10-3')"
\ No newline at end of file
diff --git a/build/COPY_ROOT_PROTON/opt/ai-dock/bin/test-proton.sh b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/test-proton.sh
new file mode 100755
index 0000000..65e8bf9
--- /dev/null
+++ b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/test-proton.sh
@@ -0,0 +1,136 @@
+#!/bin/bash
+# Test script to validate Proton GE installation
+# Runs various checks to ensure everything is working correctly
+
+set -e
+
+echo "=== Proton GE Installation Test ==="
+echo
+
+# Source Proton environment
+if [ -f /opt/ai-dock/etc/proton.env ]; then
+    source /opt/ai-dock/etc/proton.env
+    echo "✓ Proton environment sourced successfully"
+else
+    echo "✗ Proton environment not found"
+    exit 1
+fi
+
+# Check Wine installation
+echo
+echo "Checking Wine installation..."
+if command -v wine &> /dev/null; then
+    echo "✓ Wine installed: $(wine --version)"
+else
+    echo "✗ Wine not found"
+    exit 1
+fi
+
+if command -v wine64 &> /dev/null; then
+    echo "✓ Wine64 installed: $(wine64 --version)"
+else
+    echo "✗ Wine64 not found"
+    exit 1
+fi
+
+# Check Proton GE installation
+echo
+echo "Checking Proton GE installation..."
+if [ -d "/opt/proton-ge/current" ]; then
+    echo "✓ Proton GE directory exists"
+    if [ -f "/opt/proton-ge/current/proton" ]; then
+        echo "✓ Proton executable found"
+        # Try to get version
+        if [ -f "/opt/proton-ge/current/version" ]; then
+            echo "✓ Proton version: $(cat /opt/proton-ge/current/version)"
+        else
+            echo "✓ Proton version: GE-Proton10-3"
+        fi
+    else
+        echo "✗ Proton executable not found"
+        exit 1
+    fi
+else
+    echo "✗ Proton GE directory not found"
+    exit 1
+fi
+
+# Check 32-bit support
+echo
+echo "Checking 32-bit architecture support..."
+if dpkg --print-foreign-architectures | grep -q i386; then
+    echo "✓ 32-bit architecture enabled"
+else
+    echo "✗ 32-bit architecture not enabled"
+    exit 1
+fi
+
+# Check Vulkan support
+echo
+echo "Checking Vulkan support..."
+if command -v vulkaninfo &> /dev/null; then
+    echo "✓ Vulkan tools installed"
+    # Check for Vulkan drivers
+    if vulkaninfo --summary &> /dev/null; then
+        echo "✓ Vulkan drivers functional"
+    else
+        echo "⚠ Vulkan drivers may not be properly configured"
+    fi
+else
+    echo "✗ Vulkan tools not found"
+fi
+
+# Check Python tools
+echo
+echo "Checking Python tools..."
+if command -v protontricks &> /dev/null; then
+    echo "✓ Protontricks installed"
+else
+    echo "✗ Protontricks not found"
+fi
+
+# Check gaming utilities
+echo
+echo "Checking gaming utilities..."
+if command -v gamemoded &> /dev/null; then
+    echo "✓ GameMode installed"
+else
+    echo "✗ GameMode not found"
+fi
+
+if command -v mangohud &> /dev/null; then
+    echo "✓ MangoHud installed"
+else
+    echo "✗ MangoHud not found"
+fi
+
+# Check directories
+echo
+echo "Checking user directories..."
+dirs_to_check=(
+    "${WORKSPACE}/.wine"
+    "${WORKSPACE}/.proton"
+    "${WORKSPACE}/.local/share/Steam/compatibilitytools.d"
+    "${WORKSPACE}/.config/MangoHud"
+)
+
+for dir in "${dirs_to_check[@]}"; do
+    if [ -d "$dir" ]; then
+        echo "✓ Directory exists: $dir"
+    else
+        echo "✗ Directory missing: $dir"
+    fi
+done
+
+# Summary
+echo
+echo "=== Test Summary ==="
+echo "All critical components are installed and configured."
+echo "You can now run Windows applications using:"
+echo "  - proton run <executable>"
+echo "  - proton-wine <executable>"
+echo "  - wine <executable> (system Wine)"
+echo
+echo "To enable performance monitoring, prefix commands with:"
+echo "  - MANGOHUD=1 <command>"
+echo "  - gamemoderun <command>"
\ No newline at end of file
diff --git a/build/COPY_ROOT_PROTON/usr/local/bin/proton-run b/build/COPY_ROOT_PROTON/usr/local/bin/proton-run
new file mode 100755
index 0000000..176c186
--- /dev/null
+++ b/build/COPY_ROOT_PROTON/usr/local/bin/proton-run
@@ -0,0 +1,25 @@
+#!/usr/bin/env bash
+# Wrapper script for running Windows executables with Proton GE
+# Integrates GameMode and MangoHud for optimal performance
+
+# Source Proton environment if available
+[[ -f /opt/ai-dock/etc/proton.env ]] && source /opt/ai-dock/etc/proton.env
+
+# Get the executable path
+EXE_PATH="$1"
+
+# Check if file was provided
+if [ -z "$EXE_PATH" ]; then
+    echo "Usage: proton-run <executable.exe> [arguments]"
+    exit 1
+fi
+
+# Setup environment
+export STEAM_COMPAT_CLIENT_INSTALL_PATH="${STEAM_COMPAT_CLIENT_INSTALL_PATH:-/opt/steam}"
+export STEAM_COMPAT_DATA_PATH="${STEAM_COMPAT_DATA_PATH:-${WORKSPACE}/.proton}"
+
+# Enable MangoHud by default
+export MANGOHUD=1
+
+# Run with GameMode and MangoHud enabled
+exec gamemoderun mangohud /opt/proton-ge/current/proton run "$@"
\ No newline at end of file
diff --git a/build/COPY_ROOT_PROTON/usr/share/applications/proton-run.desktop b/build/COPY_ROOT_PROTON/usr/share/applications/proton-run.desktop
new file mode 100644
index 0000000..6d2060e
--- /dev/null
+++ b/build/COPY_ROOT_PROTON/usr/share/applications/proton-run.desktop
@@ -0,0 +1,12 @@
+[Desktop Entry]
+Name=Proton GE
+GenericName=Windows Compatibility Layer
+Comment=Run Windows applications with Proton GE
+Exec=proton-run %f
+Terminal=false
+Type=Application
+StartupNotify=true
+Categories=System;Emulator;
+Icon=wine
+NoDisplay=true
+MimeType=application/x-wine-extension-msp;application/x-msi;application/x-msdos-program;application/x-msdownload;application/x-exe;application/x-bat;
\ No newline at end of file
diff --git a/build/COPY_ROOT_PROTON/usr/share/kservices5/ServiceMenus/proton-run.desktop b/build/COPY_ROOT_PROTON/usr/share/kservices5/ServiceMenus/proton-run.desktop
new file mode 100644
index 0000000..5641d11
--- /dev/null
+++ b/build/COPY_ROOT_PROTON/usr/share/kservices5/ServiceMenus/proton-run.desktop
@@ -0,0 +1,26 @@
+[Desktop Entry]
+Type=Service
+ServiceTypes=KonqPopupMenu/Plugin
+MimeType=application/x-wine-extension-msp;application/x-msi;application/x-msdos-program;application/x-msdownload;application/x-exe;application/x-bat;
+Actions=RunWithProton;RunWithProtonTerminal;RunWithWine;ConfigureWine;
+X-KDE-Priority=TopLevel
+
+[Desktop Action RunWithProton]
+Name=Run with Proton GE
+Icon=wine
+Exec=proton-run %f
+
+[Desktop Action RunWithProtonTerminal]
+Name=Run with Proton GE (Terminal)
+Icon=utilities-terminal
+Exec=konsole -e proton-run %f
+
+[Desktop Action RunWithWine]
+Name=Run with System Wine
+Icon=wine
+Exec=wine %f
+
+[Desktop Action ConfigureWine]
+Name=Configure Wine Prefix
+Icon=wine-winecfg
+Exec=winecfg
\ No newline at end of file
diff --git a/build/COPY_ROOT_PROTON/usr/share/mime/packages/proton-exe.xml b/build/COPY_ROOT_PROTON/usr/share/mime/packages/proton-exe.xml
new file mode 100644
index 0000000..6b2445f
--- /dev/null
+++ b/build/COPY_ROOT_PROTON/usr/share/mime/packages/proton-exe.xml
@@ -0,0 +1,39 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<mime-info xmlns="http://www.freedesktop.org/standards/shared-mime-info">
+    <mime-type type="application/x-wine-extension-msp">
+        <comment>Windows Installer patch</comment>
+        <glob pattern="*.msp"/>
+    </mime-type>
+    
+    <mime-type type="application/x-msi">
+        <comment>Windows Installer package</comment>
+        <magic priority="50">
+            <match type="string" value="\320\317\021\340\241\261\032\341" offset="0"/>
+        </magic>
+        <glob pattern="*.msi"/>
+    </mime-type>
+    
+    <mime-type type="application/x-msdos-program">
+        <comment>Windows executable</comment>
+        <magic priority="50">
+            <match type="string" value="MZ" offset="0"/>
+        </magic>
+        <glob pattern="*.exe"/>
+        <glob pattern="*.com"/>
+    </mime-type>
+    
+    <mime-type type="application/x-msdownload">
+        <comment>Windows library</comment>
+        <magic priority="50">
+            <match type="string" value="MZ" offset="0"/>
+        </magic>
+        <glob pattern="*.dll"/>
+        <glob pattern="*.ocx"/>
+    </mime-type>
+    
+    <mime-type type="application/x-bat">
+        <comment>Windows batch file</comment>
+        <glob pattern="*.bat"/>
+        <glob pattern="*.cmd"/>
+    </mime-type>
+</mime-info>
\ No newline at end of file
diff --git a/build/Dockerfile b/build/Dockerfile
index 3dcf56e..02366fc 100644
--- a/build/Dockerfile
+++ b/build/Dockerfile
@@ -44,7 +44,7 @@ ENV DISPLAY_REFRESH 60
 ENV DISPLAY_DPI 96
 ENV DISPLAY_CDEPTH 24
 
-ARG SELKIES_VERSION=1.6.1
+ARG SELKIES_VERSION=1.6.2
 ENV SELKIES_VERSION=${SELKIES_VERSION}
 ENV SELKIES_ENCODER nvh264enc
 ENV SELKIES_ENABLE_RESIZE false
@@ -70,6 +70,13 @@ ENV APPIMAGE_EXTRACT_AND_RUN 1
 ARG WINE_BRANCH=staging
 ENV WINE_BRANCH=${WINE_BRANCH}
 
+# Proton GE environment variables
+ARG ENABLE_PROTON_GE=true
+ENV ENABLE_PROTON_GE=${ENABLE_PROTON_GE}
+ENV PROTON_VERSION=GE-Proton10-3
+ENV ENABLE_GAMEMODE=false
+ENV ENABLE_MANGOHUD=true
+
 # Copy early so we can use scripts in the build - Changes to these files will invalidate the cache and cause a rebuild.
 COPY --chown=0:1111 ./COPY_ROOT_0/ /
 
@@ -81,9 +88,22 @@ ENV IMAGE_SLUG="linux-desktop"
 
 RUN set -eo pipefail && /opt/ai-dock/bin/build/layer0/init.sh | tee /var/log/build.log
 
+# Proton GE Layer - only installed if ENABLE_PROTON_GE is true
+COPY --chown=0:1111 ./COPY_ROOT_PROTON/ /
+RUN if [ "${ENABLE_PROTON_GE}" = "true" ]; then \
+    set -eo pipefail && \
+    /opt/ai-dock/bin/build/install_proton_base.sh | tee -a /var/log/build.log && \
+    /opt/ai-dock/bin/build/install_proton_ge.sh | tee -a /var/log/build.log && \
+    /opt/ai-dock/bin/build/install_python_deps.sh | tee -a /var/log/build.log && \
+    /opt/ai-dock/bin/build/install_gaming_utils.sh | tee -a /var/log/build.log && \
+    /opt/ai-dock/bin/build/update-mime-database.sh | tee -a /var/log/build.log && \
+    apt-get clean && \
+    rm -rf /var/lib/apt/lists/*; \
+    fi
+
 # Copy overrides and new files into a final layer for fast rebuilds. Uncomment below
 COPY --chown=0:1111 ./COPY_ROOT_99/ /
 RUN set -eo pipefail && /opt/ai-dock/bin/build/layer99/init.sh | tee -a /var/log/build.log
 
 # Keep init.sh as-is and place additional logic in /opt/ai-dock/bin/preflight.sh
-CMD ["init.sh"]
+CMD ["init.sh"]
\ No newline at end of file
diff --git a/fork-vs-upstream.diff b/fork-vs-upstream.diff
new file mode 100644
index 0000000..96ea1ff
--- /dev/null
+++ b/fork-vs-upstream.diff
@@ -0,0 +1,988 @@
+diff --git a/.github/workflows/docker-build.yml b/.github/workflows/docker-build.yml
+index 81f893c..9ba2c00 100644
+--- a/.github/workflows/docker-build.yml
++++ b/.github/workflows/docker-build.yml
+@@ -2,8 +2,8 @@ name: Docker Build
+ 
+ on:
+   workflow_dispatch:
+-  #push:
+-  #  branches: [ "main" ]
++  push:
++    branches: [ "main" ]
+     
+ env:
+   UBUNTU_VERSION: 22.04
+@@ -16,7 +16,8 @@ jobs:
+       fail-fast: false
+       matrix:
+         build:
+-          - {latest: "false", selkies: "1.6.2"}
++          - {latest: "false", selkies: "1.6.2", proton: "false"}
++          - {latest: "false", selkies: "1.6.2", proton: "true"}
+     steps:
+       -
+         name: Free Space
+@@ -45,8 +46,8 @@ jobs:
+         name: Login to DockerHub
+         uses: docker/login-action@v3
+         with:
+-          username: ${{ vars.DOCKERHUB_USER }}
+-          password: ${{ secrets.DOCKERHUB_TOKEN }}
++          username: ${{ secrets.DOCKERHUB_USER }}
++          password: ${{ secrets.DOCKER_PASSWORD }}
+       -
+         name: Login to GitHub Container Registry
+         uses: docker/login-action@v3
+@@ -58,7 +59,7 @@ jobs:
+         name: Set tags
+         run: |
+           img_path_ghcr="ghcr.io/${{ env.REPO_NAMESPACE }}/${{ env.REPO_NAME }}"
+-          img_path_dhub="${{ vars.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-cpu"
++          img_path_dhub="${{ secrets.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-cpu$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
+           
+           if [[ -z ${{ matrix.build.selkies }} || ${{ matrix.build.selkies }} == "latest"  ]]; then
+               SELKIES_VERSION="$(curl -fsSL "https://api.github.com/repos/selkies-project/selkies-gstreamer/releases/latest" | jq -r '.tag_name' | sed 's/[^0-9\.\-]*//g')"
+@@ -68,12 +69,12 @@ jobs:
+           [[ -n $SELKIES_VERSION ]] || { echo "Error: SELKIES_VERSION is empty. Exiting script." >&2; exit 1; }
+           echo "SELKIES_VERSION=${SELKIES_VERSION}" >> ${GITHUB_ENV}
+ 
+-          base_tag="v2-cpu-${{ env.UBUNTU_VERSION }}"
++          base_tag="v2-cpu-${{ env.UBUNTU_VERSION }}$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
+ 
+           if [[ ${{ matrix.build.latest }} == "true" ]]; then
+                 echo "Marking latest"
+                 # GHCR.io Tags
+-                TAGS="${img_path_ghcr}:${base_tag}, ${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest-cpu"
++                TAGS="${img_path_ghcr}:${base_tag}, ${img_path_ghcr}:${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest-cpu$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
+                 # Docker.io Tags
+                 TAGS="${TAGS}, ${img_path_dhub}:${SELKIES_VERSION}-ubuntu-${{ env.UBUNTU_VERSION }}, ${img_path_dhub}:latest"
+             else
+@@ -87,6 +88,8 @@ jobs:
+           context: build
+           build-args: |
+             IMAGE_BASE=ghcr.io/ai-dock/base-image:v2-cpu-${{ env.UBUNTU_VERSION }}
++            ENABLE_PROTON_GE=${{ matrix.build.proton }}
++            SELKIES_VERSION=${{ env.SELKIES_VERSION }}
+           push: true
+           # Avoids unknown/unknown architecture and extra metadata
+           provenance: false
+@@ -98,8 +101,10 @@ jobs:
+       fail-fast: false
+       matrix:
+         build:
+-          - {latest: "false", selkies: "1.6.2", cuda: "12.1.1-cudnn8-runtime"}
+-          - {latest: "false", selkies: "1.6.2", cuda: "12.1.1-cudnn8-devel"}
++          - {latest: "false", selkies: "1.6.2", cuda: "12.1.1-cudnn8-runtime", proton: "false"}
++          - {latest: "false", selkies: "1.6.2", cuda: "12.1.1-cudnn8-runtime", proton: "true"}
++          # Devel builds commented due to size constraints
++          #- {latest: "false", selkies: "1.6.2", cuda: "12.1.1-cudnn8-devel", proton: "false"}
+     steps:
+       -
+         name: Free Space
+@@ -128,8 +133,8 @@ jobs:
+         name: Login to DockerHub
+         uses: docker/login-action@v3
+         with:
+-          username: ${{ vars.DOCKERHUB_USER }}
+-          password: ${{ secrets.DOCKERHUB_TOKEN }}
++          username: ${{ secrets.DOCKERHUB_USER }}
++          password: ${{ secrets.DOCKER_PASSWORD }}
+       -
+         name: Login to GitHub Container Registry
+         uses: docker/login-action@v3
+@@ -141,7 +146,7 @@ jobs:
+         name: Set tags
+         run: |
+           img_path_ghcr="ghcr.io/${{ env.REPO_NAMESPACE }}/${{ env.REPO_NAME }}"
+-          img_path_dhub="${{ vars.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-cuda"
++          img_path_dhub="${{ secrets.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-cuda$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
+           
+           if [[ -z ${{ matrix.build.selkies }} || ${{ matrix.build.selkies }} == "latest"  ]]; then
+               SELKIES_VERSION="$(curl -fsSL "https://api.github.com/repos/selkies-project/selkies-gstreamer/releases/latest" | jq -r '.tag_name' | sed 's/[^0-9\.\-]*//g')"
+@@ -151,12 +156,12 @@ jobs:
+           [[ -n $SELKIES_VERSION ]] || { echo "Error: SELKIES_VERSION is empty. Exiting script." >&2; exit 1; }
+           echo "SELKIES_VERSION=${SELKIES_VERSION}" >> ${GITHUB_ENV}
+           
+-          base_tag="v2-cuda-${{ matrix.build.cuda }}-${{ env.UBUNTU_VERSION }}"
++          base_tag="v2-cuda-${{ matrix.build.cuda }}-${{ env.UBUNTU_VERSION }}$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
+ 
+           if [[ ${{ matrix.build.latest }} == "true" ]]; then
+                 echo "Marking latest"
+                 # GHCR.io Tags
+-                TAGS="${img_path_ghcr}:${base_tag}, ${img_path_ghcr}:${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest, ${img_path_ghcr}:latest-cuda"
++                TAGS="${img_path_ghcr}:${base_tag}, ${img_path_ghcr}:${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo ""), ${img_path_ghcr}:latest-cuda$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
+                 # Docker.io Tags
+                 TAGS="${TAGS}, ${img_path_dhub}:v${SELKIES_VERSION}-${{ matrix.build.cuda }}, ${img_path_dhub}:latest"
+             else
+@@ -170,6 +175,8 @@ jobs:
+           context: build
+           build-args: |
+             IMAGE_BASE=ghcr.io/ai-dock/base-image:v2-cuda-${{ matrix.build.cuda }}-${{ env.UBUNTU_VERSION }}
++            ENABLE_PROTON_GE=${{ matrix.build.proton }}
++            SELKIES_VERSION=${{ env.SELKIES_VERSION }}
+           push: true
+           provenance: false
+           tags: ${{ env.TAGS }}
+@@ -180,7 +187,9 @@ jobs:
+       fail-fast: false
+       matrix:
+         build:
+-          - {latest: "false", selkies: "1.6.2", rocm: "6.0-runtime"}
++          - {latest: "false", selkies: "1.6.2", rocm: "6.0-runtime", proton: "false"}
++          # ROCm with Proton commented due to size constraints
++          #- {latest: "false", selkies: "1.6.2", rocm: "6.0-runtime", proton: "true"}
+     steps:
+       -
+         name: Free Space
+@@ -209,8 +218,8 @@ jobs:
+         name: Login to DockerHub
+         uses: docker/login-action@v3
+         with:
+-          username: ${{ vars.DOCKERHUB_USER }}
+-          password: ${{ secrets.DOCKERHUB_TOKEN }}
++          username: ${{ secrets.DOCKERHUB_USER }}
++          password: ${{ secrets.DOCKER_PASSWORD }}
+       -
+         name: Login to GitHub Container Registry
+         uses: docker/login-action@v3
+@@ -222,7 +231,7 @@ jobs:
+         name: Set tags
+         run: |
+           img_path_ghcr="ghcr.io/${{ env.REPO_NAMESPACE }}/${{ env.REPO_NAME }}"
+-          img_path_dhub="${{ vars.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-rocm"
++          img_path_dhub="${{ secrets.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-rocm$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
+           
+           if [[ -z ${{ matrix.build.selkies }} || ${{ matrix.build.selkies }} == "latest"  ]]; then
+               SELKIES_VERSION="$(curl -fsSL "https://api.github.com/repos/selkies-project/selkies-gstreamer/releases/latest" | jq -r '.tag_name' | sed 's/[^0-9\.\-]*//g')"
+@@ -232,12 +241,12 @@ jobs:
+           [[ -n $SELKIES_VERSION ]] || { echo "Error: SELKIES_VERSION is empty. Exiting script." >&2; exit 1; }
+           echo "SELKIES_VERSION=${SELKIES_VERSION}" >> ${GITHUB_ENV}
+ 
+-          base_tag="v2-cuda-${{ matrix.build.rocm }}-${{ env.UBUNTU_VERSION }}"
++          base_tag="v2-rocm-${{ matrix.build.rocm }}-${{ env.UBUNTU_VERSION }}$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
+ 
+           if [[ ${{ matrix.build.latest }} == "true" ]]; then
+                 echo "Marking latest"
+                 # GHCR.io Tags
+-                TAGS="${img_path_ghcr}:${base_tag}, ${img_path_ghcr}:${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest-rocm"
++                TAGS="${img_path_ghcr}:${base_tag}, ${img_path_ghcr}:${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest-rocm$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
+                 # Docker.io Tags
+                 TAGS="${TAGS}, ${img_path_dhub}:v${SELKIES_VERSION}-${{ matrix.build.rocm }}, ${img_path_dhub}:latest"
+             else
+@@ -251,6 +260,8 @@ jobs:
+           context: build
+           build-args: |
+             IMAGE_BASE=ghcr.io/ai-dock/base-image:v2-rocm-${{ matrix.build.rocm }}-${{ env.UBUNTU_VERSION }}
++            ENABLE_PROTON_GE=${{ matrix.build.proton }}
++            SELKIES_VERSION=${{ env.SELKIES_VERSION }}
+           push: true
+           provenance: false
+           tags: ${{ env.TAGS }}
+diff --git a/build/COPY_ROOT_PROTON/etc/supervisor/supervisord.d/proton-services.conf b/build/COPY_ROOT_PROTON/etc/supervisor/supervisord.d/proton-services.conf
+new file mode 100644
+index 0000000..78474a9
+--- /dev/null
++++ b/build/COPY_ROOT_PROTON/etc/supervisor/supervisord.d/proton-services.conf
+@@ -0,0 +1,30 @@
++[program:proton-init]
++command=/opt/ai-dock/bin/proton-init.sh
++directory=/opt/ai-dock/bin
++autostart=true
++autorestart=false
++priority=900
++startsecs=0
++startretries=0
++stdout_logfile=/var/log/supervisor/proton-init.log
++stderr_logfile=/var/log/supervisor/proton-init.log
++stdout_logfile_maxbytes=10MB
++stderr_logfile_maxbytes=10MB
++stdout_logfile_backups=1
++stderr_logfile_backups=1
++user=%(ENV_WORKSPACE_USER)s
++
++[program:gamemode]
++command=/usr/bin/gamemoded -F
++directory=/
++autostart=%(ENV_ENABLE_GAMEMODE)s
++autorestart=true
++priority=950
++stdout_logfile=/var/log/supervisor/gamemode.log
++stderr_logfile=/var/log/supervisor/gamemode.log
++stdout_logfile_maxbytes=10MB
++stderr_logfile_maxbytes=10MB
++stdout_logfile_backups=1
++stderr_logfile_backups=1
++user=%(ENV_WORKSPACE_USER)s
++environment=HOME="%(ENV_WORKSPACE)s"
+\ No newline at end of file
+diff --git a/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_gaming_utils.sh b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_gaming_utils.sh
+new file mode 100755
+index 0000000..2dfc6d6
+--- /dev/null
++++ b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_gaming_utils.sh
+@@ -0,0 +1,90 @@
++#!/bin/bash
++# Install additional gaming utilities
++# GameMode, MangoHud, and other tools for optimal gaming experience
++
++set -e
++
++function install_gaming_utils() {
++    echo "Installing gaming utilities..."
++    
++    # Add required PPAs for latest versions
++    add-apt-repository -y ppa:oibaf/graphics-drivers || true
++    apt-get update
++    
++    # Install GameMode for performance optimization
++    apt-get install -y --no-install-recommends \
++        gamemode \
++        gamemode-daemon \
++        libgamemode0 \
++        libgamemodeauto0
++    
++    # Install MangoHud for performance monitoring
++    apt-get install -y --no-install-recommends \
++        mangohud \
++        mangohud:i386
++    
++    # Install additional utilities
++    apt-get install -y --no-install-recommends \
++        cabextract \
++        unzip \
++        p7zip-full \
++        dos2unix \
++        zenity \
++        xdotool \
++        yad
++    
++    # Install media codecs for cutscenes
++    apt-get install -y --no-install-recommends \
++        ffmpeg \
++        gstreamer1.0-libav \
++        gstreamer1.0-plugins-ugly \
++        gstreamer1.0-vaapi
++    
++    # Create MangoHud config directory
++    mkdir -p /etc/mangohud
++    
++    # Create default MangoHud configuration
++    cat > /etc/mangohud/MangoHud.conf << 'EOF'
++# Default MangoHud configuration for Proton GE
++cpu_temp
++gpu_temp
++ram
++vram
++frametime
++position=top-right
++toggle_hud=F12
++toggle_fps_limit=F11
++fps_limit=0,60,144
++font_size=24
++no_display_battery
++background_alpha=0.5
++EOF
++    
++    # Create GameMode configuration
++    mkdir -p /etc/gamemode.d
++    cat > /etc/gamemode.d/gamemode.ini << 'EOF'
++[general]
++; GameMode configuration for optimal performance
++reaper_freq=5
++desiredgov=performance
++igpu_desiredgov=performance
++igpu_power_threshold=0.3
++min_core_perf=0
++
++[custom]
++; Custom scripts can be added here
++start=notify-send "GameMode started"
++end=notify-send "GameMode stopped"
++
++[gpu]
++; GPU performance settings
++apply_gpu_optimisations=accept-responsibility
++gpu_device=0
++amd_performance_level=high
++EOF
++    
++    echo "Gaming utilities installed successfully"
++}
++
++# Execute installation
++install_gaming_utils
+\ No newline at end of file
+diff --git a/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_proton_base.sh b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_proton_base.sh
+new file mode 100755
+index 0000000..c19eb43
+--- /dev/null
++++ b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_proton_base.sh
+@@ -0,0 +1,63 @@
++#!/bin/bash
++# Install base Proton/Wine dependencies
++# This script installs Wine staging and required 32-bit libraries
++
++set -e
++
++function install_proton_base() {
++    echo "Installing Proton base dependencies..."
++    
++    # Enable 32-bit architecture
++    dpkg --add-architecture i386
++    apt-get update
++    
++    # Add Wine repository
++    wget -nc https://dl.winehq.org/wine-builds/winehq.key -O /tmp/winehq.key
++    apt-key add /tmp/winehq.key
++    rm -f /tmp/winehq.key
++    
++    # Add Wine repository for Ubuntu 22.04 (jammy)
++    add-apt-repository 'deb https://dl.winehq.org/wine-builds/ubuntu/ jammy main'
++    apt-get update
++    
++    # Install Wine staging (includes both 32 and 64-bit)
++    apt-get install -y --no-install-recommends \
++        winehq-staging \
++        wine-staging \
++        wine-staging-i386 \
++        wine-staging-amd64
++    
++    # Install essential 32-bit libraries for gaming
++    apt-get install -y --no-install-recommends \
++        libgnutls30:i386 \
++        libldap-2.4-2:i386 \
++        libgpg-error0:i386 \
++        libxml2:i386 \
++        libasound2-plugins:i386 \
++        libsdl2-2.0-0:i386 \
++        libfreetype6:i386 \
++        libdbus-1-3:i386 \
++        libsqlite3-0:i386 \
++        libglu1-mesa:i386 \
++        libglu1-mesa \
++        libgles2-mesa:i386 \
++        libosmesa6:i386 \
++        libncurses5:i386 \
++        libncurses6:i386
++    
++    # Additional libraries for better compatibility
++    apt-get install -y --no-install-recommends \
++        libfaudio0:i386 \
++        libgstreamer1.0-0:i386 \
++        libgstreamer-plugins-base1.0-0:i386 \
++        gstreamer1.0-plugins-good:i386 \
++        gstreamer1.0-plugins-bad:i386 \
++        gstreamer1.0-plugins-ugly:i386 \
++        libvkd3d1:i386 \
++        libvkd3d1
++    
++    echo "Proton base dependencies installed successfully"
++}
++
++# Execute installation
++install_proton_base
+\ No newline at end of file
+diff --git a/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_proton_ge.sh b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_proton_ge.sh
+new file mode 100755
+index 0000000..856e157
+--- /dev/null
++++ b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_proton_ge.sh
+@@ -0,0 +1,60 @@
++#!/bin/bash
++# Download and install Proton GE 10-3
++# This script installs Proton GE for system-wide use
++
++set -e
++
++PROTON_GE_VERSION="GE-Proton10-3"
++PROTON_DIR="/opt/proton-ge"
++STEAM_COMPAT_DIR="/opt/steam/compatibilitytools.d"
++
++function install_proton_ge() {
++    echo "Installing Proton GE ${PROTON_GE_VERSION}..."
++    
++    # Create directories
++    mkdir -p ${PROTON_DIR}
++    mkdir -p ${STEAM_COMPAT_DIR}
++    
++    # Download Proton GE
++    cd /tmp
++    echo "Downloading Proton GE ${PROTON_GE_VERSION}..."
++    wget -q --show-progress https://github.com/GloriousEggroll/proton-ge-custom/releases/download/${PROTON_GE_VERSION}/${PROTON_GE_VERSION}.tar.gz
++    
++    # Extract to Steam compatibility tools directory
++    echo "Extracting Proton GE..."
++    tar -xzf ${PROTON_GE_VERSION}.tar.gz -C ${STEAM_COMPAT_DIR}
++    
++    # Create symlink for system-wide access
++    ln -sf ${STEAM_COMPAT_DIR}/${PROTON_GE_VERSION} ${PROTON_DIR}/current
++    
++    # Set permissions
++    chmod -R 755 ${STEAM_COMPAT_DIR}/${PROTON_GE_VERSION}
++    
++    # Create wrapper scripts for easier access
++    mkdir -p /usr/local/bin
++    
++    # Create proton wrapper
++    cat > /usr/local/bin/proton << 'EOF'
++#!/bin/bash
++export STEAM_COMPAT_CLIENT_INSTALL_PATH="${STEAM_COMPAT_CLIENT_INSTALL_PATH:-/opt/steam}"
++export STEAM_COMPAT_DATA_PATH="${STEAM_COMPAT_DATA_PATH:-/workspace/.proton}"
++exec /opt/proton-ge/current/proton "$@"
++EOF
++    chmod +x /usr/local/bin/proton
++    
++    # Create wine wrapper using Proton's wine
++    cat > /usr/local/bin/proton-wine << 'EOF'
++#!/bin/bash
++export WINEPREFIX="${WINEPREFIX:-/workspace/.wine-proton}"
++exec /opt/proton-ge/current/files/bin/wine "$@"
++EOF
++    chmod +x /usr/local/bin/proton-wine
++    
++    # Clean up
++    rm -f /tmp/${PROTON_GE_VERSION}.tar.gz
++    
++    echo "Proton GE ${PROTON_GE_VERSION} installed successfully"
++}
++
++# Execute installation
++install_proton_ge
+\ No newline at end of file
+diff --git a/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_python_deps.sh b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_python_deps.sh
+new file mode 100755
+index 0000000..8c1d76e
+--- /dev/null
++++ b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_python_deps.sh
+@@ -0,0 +1,52 @@
++#!/bin/bash
++# Install Python dependencies for Proton/Wine tools
++# Uses virtual environment to avoid conflicts with AI/ML stack
++
++set -e
++
++function install_python_deps() {
++    echo "Installing Python dependencies for Proton tools..."
++    
++    # Ensure python3-venv is installed
++    apt-get install -y --no-install-recommends python3-venv
++    
++    # Create virtual environment for Proton tools
++    python3 -m venv /opt/proton-tools
++    
++    # Activate virtual environment and install packages
++    source /opt/proton-tools/bin/activate
++    
++    # Upgrade pip
++    pip install --upgrade pip
++    
++    # Install gaming-related Python tools
++    pip install --no-cache-dir \
++        protontricks==1.12.0 \
++        "websockets<14.0" \
++        vdf \
++        pyxdg
++    
++    # Deactivate virtual environment
++    deactivate
++    
++    # Create system-wide wrapper for protontricks
++    cat > /usr/local/bin/protontricks << 'EOF'
++#!/bin/bash
++source /opt/proton-tools/bin/activate
++exec python3 -m protontricks "$@"
++EOF
++    chmod +x /usr/local/bin/protontricks
++    
++    # Create wrapper for other Python tools if needed
++    cat > /usr/local/bin/proton-python << 'EOF'
++#!/bin/bash
++source /opt/proton-tools/bin/activate
++exec python3 "$@"
++EOF
++    chmod +x /usr/local/bin/proton-python
++    
++    echo "Python dependencies installed successfully"
++}
++
++# Execute installation
++install_python_deps
+\ No newline at end of file
+diff --git a/build/COPY_ROOT_PROTON/opt/ai-dock/bin/proton-init.sh b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/proton-init.sh
+new file mode 100755
+index 0000000..e8e8866
+--- /dev/null
++++ b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/proton-init.sh
+@@ -0,0 +1,82 @@
++#!/bin/bash
++# Initialize Proton GE environment
++# Sets up environment variables and creates necessary directories
++
++set -e
++
++# Source environment if available
++[[ -f /opt/ai-dock/etc/environment.sh ]] && source /opt/ai-dock/etc/environment.sh
++
++# Setup Proton environment variables
++export PROTON_DIR="/opt/proton-ge/current"
++export PATH="${PROTON_DIR}/files/bin:${PATH}"
++export WINE="${PROTON_DIR}/files/bin/wine"
++export WINEPREFIX="${WINEPREFIX:-${WORKSPACE}/.wine}"
++export WINEDLLOVERRIDES="winemenubuilder.exe=d"
++export WINEARCH="win64"
++
++# Setup Vulkan ICD paths for multi-vendor support
++export VK_ICD_FILENAMES="/usr/share/vulkan/icd.d/nvidia_icd.json:/usr/share/vulkan/icd.d/radeon_icd.x86_64.json:/usr/share/vulkan/icd.d/intel_icd.x86_64.json"
++export VK_LAYER_PATH="/usr/share/vulkan/explicit_layer.d:/usr/share/vulkan/implicit_layer.d"
++
++# Proton specific settings
++export PROTON_USE_WINED3D11=0
++export PROTON_NO_ESYNC=0
++export PROTON_NO_FSYNC=0
++export PROTON_HIDE_NVIDIA_GPU=0
++export PROTON_ENABLE_NVAPI=1
++
++# MangoHud configuration
++export MANGOHUD_CONFIG="cpu_temp,gpu_temp,ram,vram,frametime,position=top-right"
++export MANGOHUD_CONFIGFILE="/etc/mangohud/MangoHud.conf"
++
++# Create necessary directories
++mkdir -p "${WORKSPACE}/.wine"
++mkdir -p "${WORKSPACE}/.proton"
++mkdir -p "${WORKSPACE}/.local/share/Steam/compatibilitytools.d"
++mkdir -p "${WORKSPACE}/.config/MangoHud"
++
++# Link Proton GE to user's Steam directory if needed
++if [ ! -e "${WORKSPACE}/.local/share/Steam/compatibilitytools.d/GE-Proton10-3" ]; then
++    ln -sf /opt/steam/compatibilitytools.d/GE-Proton10-3 "${WORKSPACE}/.local/share/Steam/compatibilitytools.d/"
++fi
++
++# Copy MangoHud config to user directory if not exists
++if [ ! -f "${WORKSPACE}/.config/MangoHud/MangoHud.conf" ]; then
++    cp /etc/mangohud/MangoHud.conf "${WORKSPACE}/.config/MangoHud/"
++fi
++
++# Initialize wine prefix if it doesn't exist
++if [ ! -f "${WINEPREFIX}/system.reg" ]; then
++    echo "Initializing Wine prefix at ${WINEPREFIX}..."
++    ${WINE} wineboot -u
++fi
++
++# Set proper permissions
++chown -R ${WORKSPACE_USER}:${WORKSPACE_USER} "${WORKSPACE}/.wine" 2>/dev/null || true
++chown -R ${WORKSPACE_USER}:${WORKSPACE_USER} "${WORKSPACE}/.proton" 2>/dev/null || true
++chown -R ${WORKSPACE_USER}:${WORKSPACE_USER} "${WORKSPACE}/.local" 2>/dev/null || true
++chown -R ${WORKSPACE_USER}:${WORKSPACE_USER} "${WORKSPACE}/.config" 2>/dev/null || true
++
++# Write environment to file for other processes
++cat > /opt/ai-dock/etc/proton.env << EOF
++export PROTON_DIR="${PROTON_DIR}"
++export PATH="${PROTON_DIR}/files/bin:\${PATH}"
++export WINE="${WINE}"
++export WINEPREFIX="${WINEPREFIX}"
++export WINEDLLOVERRIDES="${WINEDLLOVERRIDES}"
++export WINEARCH="${WINEARCH}"
++export VK_ICD_FILENAMES="${VK_ICD_FILENAMES}"
++export VK_LAYER_PATH="${VK_LAYER_PATH}"
++export PROTON_USE_WINED3D11=${PROTON_USE_WINED3D11}
++export PROTON_NO_ESYNC=${PROTON_NO_ESYNC}
++export PROTON_NO_FSYNC=${PROTON_NO_FSYNC}
++export PROTON_HIDE_NVIDIA_GPU=${PROTON_HIDE_NVIDIA_GPU}
++export PROTON_ENABLE_NVAPI=${PROTON_ENABLE_NVAPI}
++export MANGOHUD_CONFIG="${MANGOHUD_CONFIG}"
++export MANGOHUD_CONFIGFILE="${MANGOHUD_CONFIGFILE}"
++EOF
++
++echo "Proton GE environment initialized successfully"
++echo "Wine prefix: ${WINEPREFIX}"
++echo "Proton version: $(${PROTON_DIR}/proton --version 2>/dev/null || echo 'GE-Proton10-3')"
+\ No newline at end of file
+diff --git a/build/COPY_ROOT_PROTON/opt/ai-dock/bin/test-proton.sh b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/test-proton.sh
+new file mode 100755
+index 0000000..65e8bf9
+--- /dev/null
++++ b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/test-proton.sh
+@@ -0,0 +1,136 @@
++#!/bin/bash
++# Test script to validate Proton GE installation
++# Runs various checks to ensure everything is working correctly
++
++set -e
++
++echo "=== Proton GE Installation Test ==="
++echo
++
++# Source Proton environment
++if [ -f /opt/ai-dock/etc/proton.env ]; then
++    source /opt/ai-dock/etc/proton.env
++    echo "✓ Proton environment sourced successfully"
++else
++    echo "✗ Proton environment not found"
++    exit 1
++fi
++
++# Check Wine installation
++echo
++echo "Checking Wine installation..."
++if command -v wine &> /dev/null; then
++    echo "✓ Wine installed: $(wine --version)"
++else
++    echo "✗ Wine not found"
++    exit 1
++fi
++
++if command -v wine64 &> /dev/null; then
++    echo "✓ Wine64 installed: $(wine64 --version)"
++else
++    echo "✗ Wine64 not found"
++    exit 1
++fi
++
++# Check Proton GE installation
++echo
++echo "Checking Proton GE installation..."
++if [ -d "/opt/proton-ge/current" ]; then
++    echo "✓ Proton GE directory exists"
++    if [ -f "/opt/proton-ge/current/proton" ]; then
++        echo "✓ Proton executable found"
++        # Try to get version
++        if [ -f "/opt/proton-ge/current/version" ]; then
++            echo "✓ Proton version: $(cat /opt/proton-ge/current/version)"
++        else
++            echo "✓ Proton version: GE-Proton10-3"
++        fi
++    else
++        echo "✗ Proton executable not found"
++        exit 1
++    fi
++else
++    echo "✗ Proton GE directory not found"
++    exit 1
++fi
++
++# Check 32-bit support
++echo
++echo "Checking 32-bit architecture support..."
++if dpkg --print-foreign-architectures | grep -q i386; then
++    echo "✓ 32-bit architecture enabled"
++else
++    echo "✗ 32-bit architecture not enabled"
++    exit 1
++fi
++
++# Check Vulkan support
++echo
++echo "Checking Vulkan support..."
++if command -v vulkaninfo &> /dev/null; then
++    echo "✓ Vulkan tools installed"
++    # Check for Vulkan drivers
++    if vulkaninfo --summary &> /dev/null; then
++        echo "✓ Vulkan drivers functional"
++    else
++        echo "⚠ Vulkan drivers may not be properly configured"
++    fi
++else
++    echo "✗ Vulkan tools not found"
++fi
++
++# Check Python tools
++echo
++echo "Checking Python tools..."
++if command -v protontricks &> /dev/null; then
++    echo "✓ Protontricks installed"
++else
++    echo "✗ Protontricks not found"
++fi
++
++# Check gaming utilities
++echo
++echo "Checking gaming utilities..."
++if command -v gamemoded &> /dev/null; then
++    echo "✓ GameMode installed"
++else
++    echo "✗ GameMode not found"
++fi
++
++if command -v mangohud &> /dev/null; then
++    echo "✓ MangoHud installed"
++else
++    echo "✗ MangoHud not found"
++fi
++
++# Check directories
++echo
++echo "Checking user directories..."
++dirs_to_check=(
++    "${WORKSPACE}/.wine"
++    "${WORKSPACE}/.proton"
++    "${WORKSPACE}/.local/share/Steam/compatibilitytools.d"
++    "${WORKSPACE}/.config/MangoHud"
++)
++
++for dir in "${dirs_to_check[@]}"; do
++    if [ -d "$dir" ]; then
++        echo "✓ Directory exists: $dir"
++    else
++        echo "✗ Directory missing: $dir"
++    fi
++done
++
++# Summary
++echo
++echo "=== Test Summary ==="
++echo "All critical components are installed and configured."
++echo "You can now run Windows applications using:"
++echo "  - proton run <executable>"
++echo "  - proton-wine <executable>"
++echo "  - wine <executable> (system Wine)"
++echo
++echo "To enable performance monitoring, prefix commands with:"
++echo "  - MANGOHUD=1 <command>"
++echo "  - gamemoderun <command>"
+\ No newline at end of file
+diff --git a/build/Dockerfile b/build/Dockerfile
+index 3dcf56e..432e415 100644
+--- a/build/Dockerfile
++++ b/build/Dockerfile
+@@ -44,7 +44,7 @@ ENV DISPLAY_REFRESH 60
+ ENV DISPLAY_DPI 96
+ ENV DISPLAY_CDEPTH 24
+ 
+-ARG SELKIES_VERSION=1.6.1
++ARG SELKIES_VERSION=1.6.2
+ ENV SELKIES_VERSION=${SELKIES_VERSION}
+ ENV SELKIES_ENCODER nvh264enc
+ ENV SELKIES_ENABLE_RESIZE false
+@@ -70,6 +70,13 @@ ENV APPIMAGE_EXTRACT_AND_RUN 1
+ ARG WINE_BRANCH=staging
+ ENV WINE_BRANCH=${WINE_BRANCH}
+ 
++# Proton GE environment variables
++ARG ENABLE_PROTON_GE=true
++ENV ENABLE_PROTON_GE=${ENABLE_PROTON_GE}
++ENV PROTON_VERSION=GE-Proton10-3
++ENV ENABLE_GAMEMODE=false
++ENV ENABLE_MANGOHUD=true
++
+ # Copy early so we can use scripts in the build - Changes to these files will invalidate the cache and cause a rebuild.
+ COPY --chown=0:1111 ./COPY_ROOT_0/ /
+ 
+@@ -81,9 +88,21 @@ ENV IMAGE_SLUG="linux-desktop"
+ 
+ RUN set -eo pipefail && /opt/ai-dock/bin/build/layer0/init.sh | tee /var/log/build.log
+ 
++# Proton GE Layer - only installed if ENABLE_PROTON_GE is true
++COPY --chown=0:1111 ./COPY_ROOT_PROTON/ /
++RUN if [ "${ENABLE_PROTON_GE}" = "true" ]; then \
++    set -eo pipefail && \
++    /opt/ai-dock/bin/build/install_proton_base.sh | tee -a /var/log/build.log && \
++    /opt/ai-dock/bin/build/install_proton_ge.sh | tee -a /var/log/build.log && \
++    /opt/ai-dock/bin/build/install_python_deps.sh | tee -a /var/log/build.log && \
++    /opt/ai-dock/bin/build/install_gaming_utils.sh | tee -a /var/log/build.log && \
++    apt-get clean && \
++    rm -rf /var/lib/apt/lists/*; \
++    fi
++
+ # Copy overrides and new files into a final layer for fast rebuilds. Uncomment below
+ COPY --chown=0:1111 ./COPY_ROOT_99/ /
+ RUN set -eo pipefail && /opt/ai-dock/bin/build/layer99/init.sh | tee -a /var/log/build.log
+ 
+ # Keep init.sh as-is and place additional logic in /opt/ai-dock/bin/preflight.sh
+-CMD ["init.sh"]
++CMD ["init.sh"]
+\ No newline at end of file
+diff --git a/proton-ge-integration.diff b/proton-ge-integration.diff
+new file mode 100644
+index 0000000..ec25504
+--- /dev/null
++++ b/proton-ge-integration.diff
+@@ -0,0 +1,188 @@
++diff --git a/.github/workflows/docker-build.yml b/.github/workflows/docker-build.yml
++index 81f893c..613ef5c 100644
++--- a/.github/workflows/docker-build.yml
+++++ b/.github/workflows/docker-build.yml
++@@ -16,7 +16,8 @@ jobs:
++       fail-fast: false
++       matrix:
++         build:
++-          - {latest: "false", selkies: "1.6.2"}
+++          - {latest: "false", selkies: "1.6.2", proton: "false"}
+++          - {latest: "false", selkies: "1.6.2", proton: "true"}
++     steps:
++       -
++         name: Free Space
++@@ -58,7 +59,7 @@ jobs:
++         name: Set tags
++         run: |
++           img_path_ghcr="ghcr.io/${{ env.REPO_NAMESPACE }}/${{ env.REPO_NAME }}"
++-          img_path_dhub="${{ vars.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-cpu"
+++          img_path_dhub="${{ vars.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-cpu$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
++           
++           if [[ -z ${{ matrix.build.selkies }} || ${{ matrix.build.selkies }} == "latest"  ]]; then
++               SELKIES_VERSION="$(curl -fsSL "https://api.github.com/repos/selkies-project/selkies-gstreamer/releases/latest" | jq -r '.tag_name' | sed 's/[^0-9\.\-]*//g')"
++@@ -68,12 +69,12 @@ jobs:
++           [[ -n $SELKIES_VERSION ]] || { echo "Error: SELKIES_VERSION is empty. Exiting script." >&2; exit 1; }
++           echo "SELKIES_VERSION=${SELKIES_VERSION}" >> ${GITHUB_ENV}
++ 
++-          base_tag="v2-cpu-${{ env.UBUNTU_VERSION }}"
+++          base_tag="v2-cpu-${{ env.UBUNTU_VERSION }}$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
++ 
++           if [[ ${{ matrix.build.latest }} == "true" ]]; then
++                 echo "Marking latest"
++                 # GHCR.io Tags
++-                TAGS="${img_path_ghcr}:${base_tag}, ${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest-cpu"
+++                TAGS="${img_path_ghcr}:${base_tag}, ${img_path_ghcr}:${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest-cpu$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
++                 # Docker.io Tags
++                 TAGS="${TAGS}, ${img_path_dhub}:${SELKIES_VERSION}-ubuntu-${{ env.UBUNTU_VERSION }}, ${img_path_dhub}:latest"
++             else
++@@ -87,6 +88,8 @@ jobs:
++           context: build
++           build-args: |
++             IMAGE_BASE=ghcr.io/ai-dock/base-image:v2-cpu-${{ env.UBUNTU_VERSION }}
+++            ENABLE_PROTON_GE=${{ matrix.build.proton }}
+++            SELKIES_VERSION=${{ env.SELKIES_VERSION }}
++           push: true
++           # Avoids unknown/unknown architecture and extra metadata
++           provenance: false
++@@ -98,8 +101,10 @@ jobs:
++       fail-fast: false
++       matrix:
++         build:
++-          - {latest: "false", selkies: "1.6.2", cuda: "12.1.1-cudnn8-runtime"}
++-          - {latest: "false", selkies: "1.6.2", cuda: "12.1.1-cudnn8-devel"}
+++          - {latest: "false", selkies: "1.6.2", cuda: "12.1.1-cudnn8-runtime", proton: "false"}
+++          - {latest: "false", selkies: "1.6.2", cuda: "12.1.1-cudnn8-runtime", proton: "true"}
+++          # Devel builds commented due to size constraints
+++          #- {latest: "false", selkies: "1.6.2", cuda: "12.1.1-cudnn8-devel", proton: "false"}
++     steps:
++       -
++         name: Free Space
++@@ -141,7 +146,7 @@ jobs:
++         name: Set tags
++         run: |
++           img_path_ghcr="ghcr.io/${{ env.REPO_NAMESPACE }}/${{ env.REPO_NAME }}"
++-          img_path_dhub="${{ vars.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-cuda"
+++          img_path_dhub="${{ vars.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-cuda$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
++           
++           if [[ -z ${{ matrix.build.selkies }} || ${{ matrix.build.selkies }} == "latest"  ]]; then
++               SELKIES_VERSION="$(curl -fsSL "https://api.github.com/repos/selkies-project/selkies-gstreamer/releases/latest" | jq -r '.tag_name' | sed 's/[^0-9\.\-]*//g')"
++@@ -151,12 +156,12 @@ jobs:
++           [[ -n $SELKIES_VERSION ]] || { echo "Error: SELKIES_VERSION is empty. Exiting script." >&2; exit 1; }
++           echo "SELKIES_VERSION=${SELKIES_VERSION}" >> ${GITHUB_ENV}
++           
++-          base_tag="v2-cuda-${{ matrix.build.cuda }}-${{ env.UBUNTU_VERSION }}"
+++          base_tag="v2-cuda-${{ matrix.build.cuda }}-${{ env.UBUNTU_VERSION }}$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
++ 
++           if [[ ${{ matrix.build.latest }} == "true" ]]; then
++                 echo "Marking latest"
++                 # GHCR.io Tags
++-                TAGS="${img_path_ghcr}:${base_tag}, ${img_path_ghcr}:${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest, ${img_path_ghcr}:latest-cuda"
+++                TAGS="${img_path_ghcr}:${base_tag}, ${img_path_ghcr}:${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo ""), ${img_path_ghcr}:latest-cuda$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
++                 # Docker.io Tags
++                 TAGS="${TAGS}, ${img_path_dhub}:v${SELKIES_VERSION}-${{ matrix.build.cuda }}, ${img_path_dhub}:latest"
++             else
++@@ -170,6 +175,8 @@ jobs:
++           context: build
++           build-args: |
++             IMAGE_BASE=ghcr.io/ai-dock/base-image:v2-cuda-${{ matrix.build.cuda }}-${{ env.UBUNTU_VERSION }}
+++            ENABLE_PROTON_GE=${{ matrix.build.proton }}
+++            SELKIES_VERSION=${{ env.SELKIES_VERSION }}
++           push: true
++           provenance: false
++           tags: ${{ env.TAGS }}
++@@ -180,7 +187,9 @@ jobs:
++       fail-fast: false
++       matrix:
++         build:
++-          - {latest: "false", selkies: "1.6.2", rocm: "6.0-runtime"}
+++          - {latest: "false", selkies: "1.6.2", rocm: "6.0-runtime", proton: "false"}
+++          # ROCm with Proton commented due to size constraints
+++          #- {latest: "false", selkies: "1.6.2", rocm: "6.0-runtime", proton: "true"}
++     steps:
++       -
++         name: Free Space
++@@ -222,7 +231,7 @@ jobs:
++         name: Set tags
++         run: |
++           img_path_ghcr="ghcr.io/${{ env.REPO_NAMESPACE }}/${{ env.REPO_NAME }}"
++-          img_path_dhub="${{ vars.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-rocm"
+++          img_path_dhub="${{ vars.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-rocm$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
++           
++           if [[ -z ${{ matrix.build.selkies }} || ${{ matrix.build.selkies }} == "latest"  ]]; then
++               SELKIES_VERSION="$(curl -fsSL "https://api.github.com/repos/selkies-project/selkies-gstreamer/releases/latest" | jq -r '.tag_name' | sed 's/[^0-9\.\-]*//g')"
++@@ -232,12 +241,12 @@ jobs:
++           [[ -n $SELKIES_VERSION ]] || { echo "Error: SELKIES_VERSION is empty. Exiting script." >&2; exit 1; }
++           echo "SELKIES_VERSION=${SELKIES_VERSION}" >> ${GITHUB_ENV}
++ 
++-          base_tag="v2-cuda-${{ matrix.build.rocm }}-${{ env.UBUNTU_VERSION }}"
+++          base_tag="v2-rocm-${{ matrix.build.rocm }}-${{ env.UBUNTU_VERSION }}$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
++ 
++           if [[ ${{ matrix.build.latest }} == "true" ]]; then
++                 echo "Marking latest"
++                 # GHCR.io Tags
++-                TAGS="${img_path_ghcr}:${base_tag}, ${img_path_ghcr}:${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest-rocm"
+++                TAGS="${img_path_ghcr}:${base_tag}, ${img_path_ghcr}:${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest-rocm$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
++                 # Docker.io Tags
++                 TAGS="${TAGS}, ${img_path_dhub}:v${SELKIES_VERSION}-${{ matrix.build.rocm }}, ${img_path_dhub}:latest"
++             else
++@@ -251,6 +260,8 @@ jobs:
++           context: build
++           build-args: |
++             IMAGE_BASE=ghcr.io/ai-dock/base-image:v2-rocm-${{ matrix.build.rocm }}-${{ env.UBUNTU_VERSION }}
+++            ENABLE_PROTON_GE=${{ matrix.build.proton }}
+++            SELKIES_VERSION=${{ env.SELKIES_VERSION }}
++           push: true
++           provenance: false
++           tags: ${{ env.TAGS }}
++diff --git a/build/Dockerfile b/build/Dockerfile
++index 3dcf56e..432e415 100644
++--- a/build/Dockerfile
+++++ b/build/Dockerfile
++@@ -44,7 +44,7 @@ ENV DISPLAY_REFRESH 60
++ ENV DISPLAY_DPI 96
++ ENV DISPLAY_CDEPTH 24
++ 
++-ARG SELKIES_VERSION=1.6.1
+++ARG SELKIES_VERSION=1.6.2
++ ENV SELKIES_VERSION=${SELKIES_VERSION}
++ ENV SELKIES_ENCODER nvh264enc
++ ENV SELKIES_ENABLE_RESIZE false
++@@ -70,6 +70,13 @@ ENV APPIMAGE_EXTRACT_AND_RUN 1
++ ARG WINE_BRANCH=staging
++ ENV WINE_BRANCH=${WINE_BRANCH}
++ 
+++# Proton GE environment variables
+++ARG ENABLE_PROTON_GE=true
+++ENV ENABLE_PROTON_GE=${ENABLE_PROTON_GE}
+++ENV PROTON_VERSION=GE-Proton10-3
+++ENV ENABLE_GAMEMODE=false
+++ENV ENABLE_MANGOHUD=true
+++
++ # Copy early so we can use scripts in the build - Changes to these files will invalidate the cache and cause a rebuild.
++ COPY --chown=0:1111 ./COPY_ROOT_0/ /
++ 
++@@ -81,9 +88,21 @@ ENV IMAGE_SLUG="linux-desktop"
++ 
++ RUN set -eo pipefail && /opt/ai-dock/bin/build/layer0/init.sh | tee /var/log/build.log
++ 
+++# Proton GE Layer - only installed if ENABLE_PROTON_GE is true
+++COPY --chown=0:1111 ./COPY_ROOT_PROTON/ /
+++RUN if [ "${ENABLE_PROTON_GE}" = "true" ]; then \
+++    set -eo pipefail && \
+++    /opt/ai-dock/bin/build/install_proton_base.sh | tee -a /var/log/build.log && \
+++    /opt/ai-dock/bin/build/install_proton_ge.sh | tee -a /var/log/build.log && \
+++    /opt/ai-dock/bin/build/install_python_deps.sh | tee -a /var/log/build.log && \
+++    /opt/ai-dock/bin/build/install_gaming_utils.sh | tee -a /var/log/build.log && \
+++    apt-get clean && \
+++    rm -rf /var/lib/apt/lists/*; \
+++    fi
+++
++ # Copy overrides and new files into a final layer for fast rebuilds. Uncomment below
++ COPY --chown=0:1111 ./COPY_ROOT_99/ /
++ RUN set -eo pipefail && /opt/ai-dock/bin/build/layer99/init.sh | tee -a /var/log/build.log
++ 
++ # Keep init.sh as-is and place additional logic in /opt/ai-dock/bin/preflight.sh
++-CMD ["init.sh"]
+++CMD ["init.sh"]
++\ No newline at end of file
diff --git a/proton-ge-changes.diff b/proton-ge-changes.diff
new file mode 100644
index 0000000..6cba240
--- /dev/null
+++ b/proton-ge-changes.diff
@@ -0,0 +1,944 @@
+diff --git a/.github/workflows/docker-build.yml b/.github/workflows/docker-build.yml
+index 81f893c..613ef5c 100644
+--- a/.github/workflows/docker-build.yml
++++ b/.github/workflows/docker-build.yml
+@@ -16,7 +16,8 @@ jobs:
+       fail-fast: false
+       matrix:
+         build:
+-          - {latest: "false", selkies: "1.6.2"}
++          - {latest: "false", selkies: "1.6.2", proton: "false"}
++          - {latest: "false", selkies: "1.6.2", proton: "true"}
+     steps:
+       -
+         name: Free Space
+@@ -58,7 +59,7 @@ jobs:
+         name: Set tags
+         run: |
+           img_path_ghcr="ghcr.io/${{ env.REPO_NAMESPACE }}/${{ env.REPO_NAME }}"
+-          img_path_dhub="${{ vars.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-cpu"
++          img_path_dhub="${{ vars.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-cpu$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
+           
+           if [[ -z ${{ matrix.build.selkies }} || ${{ matrix.build.selkies }} == "latest"  ]]; then
+               SELKIES_VERSION="$(curl -fsSL "https://api.github.com/repos/selkies-project/selkies-gstreamer/releases/latest" | jq -r '.tag_name' | sed 's/[^0-9\.\-]*//g')"
+@@ -68,12 +69,12 @@ jobs:
+           [[ -n $SELKIES_VERSION ]] || { echo "Error: SELKIES_VERSION is empty. Exiting script." >&2; exit 1; }
+           echo "SELKIES_VERSION=${SELKIES_VERSION}" >> ${GITHUB_ENV}
+ 
+-          base_tag="v2-cpu-${{ env.UBUNTU_VERSION }}"
++          base_tag="v2-cpu-${{ env.UBUNTU_VERSION }}$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
+ 
+           if [[ ${{ matrix.build.latest }} == "true" ]]; then
+                 echo "Marking latest"
+                 # GHCR.io Tags
+-                TAGS="${img_path_ghcr}:${base_tag}, ${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest-cpu"
++                TAGS="${img_path_ghcr}:${base_tag}, ${img_path_ghcr}:${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest-cpu$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
+                 # Docker.io Tags
+                 TAGS="${TAGS}, ${img_path_dhub}:${SELKIES_VERSION}-ubuntu-${{ env.UBUNTU_VERSION }}, ${img_path_dhub}:latest"
+             else
+@@ -87,6 +88,8 @@ jobs:
+           context: build
+           build-args: |
+             IMAGE_BASE=ghcr.io/ai-dock/base-image:v2-cpu-${{ env.UBUNTU_VERSION }}
++            ENABLE_PROTON_GE=${{ matrix.build.proton }}
++            SELKIES_VERSION=${{ env.SELKIES_VERSION }}
+           push: true
+           # Avoids unknown/unknown architecture and extra metadata
+           provenance: false
+@@ -98,8 +101,10 @@ jobs:
+       fail-fast: false
+       matrix:
+         build:
+-          - {latest: "false", selkies: "1.6.2", cuda: "12.1.1-cudnn8-runtime"}
+-          - {latest: "false", selkies: "1.6.2", cuda: "12.1.1-cudnn8-devel"}
++          - {latest: "false", selkies: "1.6.2", cuda: "12.1.1-cudnn8-runtime", proton: "false"}
++          - {latest: "false", selkies: "1.6.2", cuda: "12.1.1-cudnn8-runtime", proton: "true"}
++          # Devel builds commented due to size constraints
++          #- {latest: "false", selkies: "1.6.2", cuda: "12.1.1-cudnn8-devel", proton: "false"}
+     steps:
+       -
+         name: Free Space
+@@ -141,7 +146,7 @@ jobs:
+         name: Set tags
+         run: |
+           img_path_ghcr="ghcr.io/${{ env.REPO_NAMESPACE }}/${{ env.REPO_NAME }}"
+-          img_path_dhub="${{ vars.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-cuda"
++          img_path_dhub="${{ vars.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-cuda$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
+           
+           if [[ -z ${{ matrix.build.selkies }} || ${{ matrix.build.selkies }} == "latest"  ]]; then
+               SELKIES_VERSION="$(curl -fsSL "https://api.github.com/repos/selkies-project/selkies-gstreamer/releases/latest" | jq -r '.tag_name' | sed 's/[^0-9\.\-]*//g')"
+@@ -151,12 +156,12 @@ jobs:
+           [[ -n $SELKIES_VERSION ]] || { echo "Error: SELKIES_VERSION is empty. Exiting script." >&2; exit 1; }
+           echo "SELKIES_VERSION=${SELKIES_VERSION}" >> ${GITHUB_ENV}
+           
+-          base_tag="v2-cuda-${{ matrix.build.cuda }}-${{ env.UBUNTU_VERSION }}"
++          base_tag="v2-cuda-${{ matrix.build.cuda }}-${{ env.UBUNTU_VERSION }}$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
+ 
+           if [[ ${{ matrix.build.latest }} == "true" ]]; then
+                 echo "Marking latest"
+                 # GHCR.io Tags
+-                TAGS="${img_path_ghcr}:${base_tag}, ${img_path_ghcr}:${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest, ${img_path_ghcr}:latest-cuda"
++                TAGS="${img_path_ghcr}:${base_tag}, ${img_path_ghcr}:${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo ""), ${img_path_ghcr}:latest-cuda$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
+                 # Docker.io Tags
+                 TAGS="${TAGS}, ${img_path_dhub}:v${SELKIES_VERSION}-${{ matrix.build.cuda }}, ${img_path_dhub}:latest"
+             else
+@@ -170,6 +175,8 @@ jobs:
+           context: build
+           build-args: |
+             IMAGE_BASE=ghcr.io/ai-dock/base-image:v2-cuda-${{ matrix.build.cuda }}-${{ env.UBUNTU_VERSION }}
++            ENABLE_PROTON_GE=${{ matrix.build.proton }}
++            SELKIES_VERSION=${{ env.SELKIES_VERSION }}
+           push: true
+           provenance: false
+           tags: ${{ env.TAGS }}
+@@ -180,7 +187,9 @@ jobs:
+       fail-fast: false
+       matrix:
+         build:
+-          - {latest: "false", selkies: "1.6.2", rocm: "6.0-runtime"}
++          - {latest: "false", selkies: "1.6.2", rocm: "6.0-runtime", proton: "false"}
++          # ROCm with Proton commented due to size constraints
++          #- {latest: "false", selkies: "1.6.2", rocm: "6.0-runtime", proton: "true"}
+     steps:
+       -
+         name: Free Space
+@@ -222,7 +231,7 @@ jobs:
+         name: Set tags
+         run: |
+           img_path_ghcr="ghcr.io/${{ env.REPO_NAMESPACE }}/${{ env.REPO_NAME }}"
+-          img_path_dhub="${{ vars.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-rocm"
++          img_path_dhub="${{ vars.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-rocm$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
+           
+           if [[ -z ${{ matrix.build.selkies }} || ${{ matrix.build.selkies }} == "latest"  ]]; then
+               SELKIES_VERSION="$(curl -fsSL "https://api.github.com/repos/selkies-project/selkies-gstreamer/releases/latest" | jq -r '.tag_name' | sed 's/[^0-9\.\-]*//g')"
+@@ -232,12 +241,12 @@ jobs:
+           [[ -n $SELKIES_VERSION ]] || { echo "Error: SELKIES_VERSION is empty. Exiting script." >&2; exit 1; }
+           echo "SELKIES_VERSION=${SELKIES_VERSION}" >> ${GITHUB_ENV}
+ 
+-          base_tag="v2-cuda-${{ matrix.build.rocm }}-${{ env.UBUNTU_VERSION }}"
++          base_tag="v2-rocm-${{ matrix.build.rocm }}-${{ env.UBUNTU_VERSION }}$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
+ 
+           if [[ ${{ matrix.build.latest }} == "true" ]]; then
+                 echo "Marking latest"
+                 # GHCR.io Tags
+-                TAGS="${img_path_ghcr}:${base_tag}, ${img_path_ghcr}:${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest-rocm"
++                TAGS="${img_path_ghcr}:${base_tag}, ${img_path_ghcr}:${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest-rocm$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
+                 # Docker.io Tags
+                 TAGS="${TAGS}, ${img_path_dhub}:v${SELKIES_VERSION}-${{ matrix.build.rocm }}, ${img_path_dhub}:latest"
+             else
+@@ -251,6 +260,8 @@ jobs:
+           context: build
+           build-args: |
+             IMAGE_BASE=ghcr.io/ai-dock/base-image:v2-rocm-${{ matrix.build.rocm }}-${{ env.UBUNTU_VERSION }}
++            ENABLE_PROTON_GE=${{ matrix.build.proton }}
++            SELKIES_VERSION=${{ env.SELKIES_VERSION }}
+           push: true
+           provenance: false
+           tags: ${{ env.TAGS }}
+diff --git a/build/COPY_ROOT_PROTON/etc/supervisor/supervisord.d/proton-services.conf b/build/COPY_ROOT_PROTON/etc/supervisor/supervisord.d/proton-services.conf
+new file mode 100644
+index 0000000..78474a9
+--- /dev/null
++++ b/build/COPY_ROOT_PROTON/etc/supervisor/supervisord.d/proton-services.conf
+@@ -0,0 +1,30 @@
++[program:proton-init]
++command=/opt/ai-dock/bin/proton-init.sh
++directory=/opt/ai-dock/bin
++autostart=true
++autorestart=false
++priority=900
++startsecs=0
++startretries=0
++stdout_logfile=/var/log/supervisor/proton-init.log
++stderr_logfile=/var/log/supervisor/proton-init.log
++stdout_logfile_maxbytes=10MB
++stderr_logfile_maxbytes=10MB
++stdout_logfile_backups=1
++stderr_logfile_backups=1
++user=%(ENV_WORKSPACE_USER)s
++
++[program:gamemode]
++command=/usr/bin/gamemoded -F
++directory=/
++autostart=%(ENV_ENABLE_GAMEMODE)s
++autorestart=true
++priority=950
++stdout_logfile=/var/log/supervisor/gamemode.log
++stderr_logfile=/var/log/supervisor/gamemode.log
++stdout_logfile_maxbytes=10MB
++stderr_logfile_maxbytes=10MB
++stdout_logfile_backups=1
++stderr_logfile_backups=1
++user=%(ENV_WORKSPACE_USER)s
++environment=HOME="%(ENV_WORKSPACE)s"
+\ No newline at end of file
+diff --git a/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_gaming_utils.sh b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_gaming_utils.sh
+new file mode 100755
+index 0000000..2dfc6d6
+--- /dev/null
++++ b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_gaming_utils.sh
+@@ -0,0 +1,90 @@
++#!/bin/bash
++# Install additional gaming utilities
++# GameMode, MangoHud, and other tools for optimal gaming experience
++
++set -e
++
++function install_gaming_utils() {
++    echo "Installing gaming utilities..."
++    
++    # Add required PPAs for latest versions
++    add-apt-repository -y ppa:oibaf/graphics-drivers || true
++    apt-get update
++    
++    # Install GameMode for performance optimization
++    apt-get install -y --no-install-recommends \
++        gamemode \
++        gamemode-daemon \
++        libgamemode0 \
++        libgamemodeauto0
++    
++    # Install MangoHud for performance monitoring
++    apt-get install -y --no-install-recommends \
++        mangohud \
++        mangohud:i386
++    
++    # Install additional utilities
++    apt-get install -y --no-install-recommends \
++        cabextract \
++        unzip \
++        p7zip-full \
++        dos2unix \
++        zenity \
++        xdotool \
++        yad
++    
++    # Install media codecs for cutscenes
++    apt-get install -y --no-install-recommends \
++        ffmpeg \
++        gstreamer1.0-libav \
++        gstreamer1.0-plugins-ugly \
++        gstreamer1.0-vaapi
++    
++    # Create MangoHud config directory
++    mkdir -p /etc/mangohud
++    
++    # Create default MangoHud configuration
++    cat > /etc/mangohud/MangoHud.conf << 'EOF'
++# Default MangoHud configuration for Proton GE
++cpu_temp
++gpu_temp
++ram
++vram
++frametime
++position=top-right
++toggle_hud=F12
++toggle_fps_limit=F11
++fps_limit=0,60,144
++font_size=24
++no_display_battery
++background_alpha=0.5
++EOF
++    
++    # Create GameMode configuration
++    mkdir -p /etc/gamemode.d
++    cat > /etc/gamemode.d/gamemode.ini << 'EOF'
++[general]
++; GameMode configuration for optimal performance
++reaper_freq=5
++desiredgov=performance
++igpu_desiredgov=performance
++igpu_power_threshold=0.3
++min_core_perf=0
++
++[custom]
++; Custom scripts can be added here
++start=notify-send "GameMode started"
++end=notify-send "GameMode stopped"
++
++[gpu]
++; GPU performance settings
++apply_gpu_optimisations=accept-responsibility
++gpu_device=0
++amd_performance_level=high
++EOF
++    
++    echo "Gaming utilities installed successfully"
++}
++
++# Execute installation
++install_gaming_utils
+\ No newline at end of file
+diff --git a/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_proton_base.sh b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_proton_base.sh
+new file mode 100755
+index 0000000..c19eb43
+--- /dev/null
++++ b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_proton_base.sh
+@@ -0,0 +1,63 @@
++#!/bin/bash
++# Install base Proton/Wine dependencies
++# This script installs Wine staging and required 32-bit libraries
++
++set -e
++
++function install_proton_base() {
++    echo "Installing Proton base dependencies..."
++    
++    # Enable 32-bit architecture
++    dpkg --add-architecture i386
++    apt-get update
++    
++    # Add Wine repository
++    wget -nc https://dl.winehq.org/wine-builds/winehq.key -O /tmp/winehq.key
++    apt-key add /tmp/winehq.key
++    rm -f /tmp/winehq.key
++    
++    # Add Wine repository for Ubuntu 22.04 (jammy)
++    add-apt-repository 'deb https://dl.winehq.org/wine-builds/ubuntu/ jammy main'
++    apt-get update
++    
++    # Install Wine staging (includes both 32 and 64-bit)
++    apt-get install -y --no-install-recommends \
++        winehq-staging \
++        wine-staging \
++        wine-staging-i386 \
++        wine-staging-amd64
++    
++    # Install essential 32-bit libraries for gaming
++    apt-get install -y --no-install-recommends \
++        libgnutls30:i386 \
++        libldap-2.4-2:i386 \
++        libgpg-error0:i386 \
++        libxml2:i386 \
++        libasound2-plugins:i386 \
++        libsdl2-2.0-0:i386 \
++        libfreetype6:i386 \
++        libdbus-1-3:i386 \
++        libsqlite3-0:i386 \
++        libglu1-mesa:i386 \
++        libglu1-mesa \
++        libgles2-mesa:i386 \
++        libosmesa6:i386 \
++        libncurses5:i386 \
++        libncurses6:i386
++    
++    # Additional libraries for better compatibility
++    apt-get install -y --no-install-recommends \
++        libfaudio0:i386 \
++        libgstreamer1.0-0:i386 \
++        libgstreamer-plugins-base1.0-0:i386 \
++        gstreamer1.0-plugins-good:i386 \
++        gstreamer1.0-plugins-bad:i386 \
++        gstreamer1.0-plugins-ugly:i386 \
++        libvkd3d1:i386 \
++        libvkd3d1
++    
++    echo "Proton base dependencies installed successfully"
++}
++
++# Execute installation
++install_proton_base
+\ No newline at end of file
+diff --git a/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_proton_ge.sh b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_proton_ge.sh
+new file mode 100755
+index 0000000..856e157
+--- /dev/null
++++ b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_proton_ge.sh
+@@ -0,0 +1,60 @@
++#!/bin/bash
++# Download and install Proton GE 10-3
++# This script installs Proton GE for system-wide use
++
++set -e
++
++PROTON_GE_VERSION="GE-Proton10-3"
++PROTON_DIR="/opt/proton-ge"
++STEAM_COMPAT_DIR="/opt/steam/compatibilitytools.d"
++
++function install_proton_ge() {
++    echo "Installing Proton GE ${PROTON_GE_VERSION}..."
++    
++    # Create directories
++    mkdir -p ${PROTON_DIR}
++    mkdir -p ${STEAM_COMPAT_DIR}
++    
++    # Download Proton GE
++    cd /tmp
++    echo "Downloading Proton GE ${PROTON_GE_VERSION}..."
++    wget -q --show-progress https://github.com/GloriousEggroll/proton-ge-custom/releases/download/${PROTON_GE_VERSION}/${PROTON_GE_VERSION}.tar.gz
++    
++    # Extract to Steam compatibility tools directory
++    echo "Extracting Proton GE..."
++    tar -xzf ${PROTON_GE_VERSION}.tar.gz -C ${STEAM_COMPAT_DIR}
++    
++    # Create symlink for system-wide access
++    ln -sf ${STEAM_COMPAT_DIR}/${PROTON_GE_VERSION} ${PROTON_DIR}/current
++    
++    # Set permissions
++    chmod -R 755 ${STEAM_COMPAT_DIR}/${PROTON_GE_VERSION}
++    
++    # Create wrapper scripts for easier access
++    mkdir -p /usr/local/bin
++    
++    # Create proton wrapper
++    cat > /usr/local/bin/proton << 'EOF'
++#!/bin/bash
++export STEAM_COMPAT_CLIENT_INSTALL_PATH="${STEAM_COMPAT_CLIENT_INSTALL_PATH:-/opt/steam}"
++export STEAM_COMPAT_DATA_PATH="${STEAM_COMPAT_DATA_PATH:-/workspace/.proton}"
++exec /opt/proton-ge/current/proton "$@"
++EOF
++    chmod +x /usr/local/bin/proton
++    
++    # Create wine wrapper using Proton's wine
++    cat > /usr/local/bin/proton-wine << 'EOF'
++#!/bin/bash
++export WINEPREFIX="${WINEPREFIX:-/workspace/.wine-proton}"
++exec /opt/proton-ge/current/files/bin/wine "$@"
++EOF
++    chmod +x /usr/local/bin/proton-wine
++    
++    # Clean up
++    rm -f /tmp/${PROTON_GE_VERSION}.tar.gz
++    
++    echo "Proton GE ${PROTON_GE_VERSION} installed successfully"
++}
++
++# Execute installation
++install_proton_ge
+\ No newline at end of file
+diff --git a/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_python_deps.sh b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_python_deps.sh
+new file mode 100755
+index 0000000..8c1d76e
+--- /dev/null
++++ b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/build/install_python_deps.sh
+@@ -0,0 +1,52 @@
++#!/bin/bash
++# Install Python dependencies for Proton/Wine tools
++# Uses virtual environment to avoid conflicts with AI/ML stack
++
++set -e
++
++function install_python_deps() {
++    echo "Installing Python dependencies for Proton tools..."
++    
++    # Ensure python3-venv is installed
++    apt-get install -y --no-install-recommends python3-venv
++    
++    # Create virtual environment for Proton tools
++    python3 -m venv /opt/proton-tools
++    
++    # Activate virtual environment and install packages
++    source /opt/proton-tools/bin/activate
++    
++    # Upgrade pip
++    pip install --upgrade pip
++    
++    # Install gaming-related Python tools
++    pip install --no-cache-dir \
++        protontricks==1.12.0 \
++        "websockets<14.0" \
++        vdf \
++        pyxdg
++    
++    # Deactivate virtual environment
++    deactivate
++    
++    # Create system-wide wrapper for protontricks
++    cat > /usr/local/bin/protontricks << 'EOF'
++#!/bin/bash
++source /opt/proton-tools/bin/activate
++exec python3 -m protontricks "$@"
++EOF
++    chmod +x /usr/local/bin/protontricks
++    
++    # Create wrapper for other Python tools if needed
++    cat > /usr/local/bin/proton-python << 'EOF'
++#!/bin/bash
++source /opt/proton-tools/bin/activate
++exec python3 "$@"
++EOF
++    chmod +x /usr/local/bin/proton-python
++    
++    echo "Python dependencies installed successfully"
++}
++
++# Execute installation
++install_python_deps
+\ No newline at end of file
+diff --git a/build/COPY_ROOT_PROTON/opt/ai-dock/bin/proton-init.sh b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/proton-init.sh
+new file mode 100755
+index 0000000..e8e8866
+--- /dev/null
++++ b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/proton-init.sh
+@@ -0,0 +1,82 @@
++#!/bin/bash
++# Initialize Proton GE environment
++# Sets up environment variables and creates necessary directories
++
++set -e
++
++# Source environment if available
++[[ -f /opt/ai-dock/etc/environment.sh ]] && source /opt/ai-dock/etc/environment.sh
++
++# Setup Proton environment variables
++export PROTON_DIR="/opt/proton-ge/current"
++export PATH="${PROTON_DIR}/files/bin:${PATH}"
++export WINE="${PROTON_DIR}/files/bin/wine"
++export WINEPREFIX="${WINEPREFIX:-${WORKSPACE}/.wine}"
++export WINEDLLOVERRIDES="winemenubuilder.exe=d"
++export WINEARCH="win64"
++
++# Setup Vulkan ICD paths for multi-vendor support
++export VK_ICD_FILENAMES="/usr/share/vulkan/icd.d/nvidia_icd.json:/usr/share/vulkan/icd.d/radeon_icd.x86_64.json:/usr/share/vulkan/icd.d/intel_icd.x86_64.json"
++export VK_LAYER_PATH="/usr/share/vulkan/explicit_layer.d:/usr/share/vulkan/implicit_layer.d"
++
++# Proton specific settings
++export PROTON_USE_WINED3D11=0
++export PROTON_NO_ESYNC=0
++export PROTON_NO_FSYNC=0
++export PROTON_HIDE_NVIDIA_GPU=0
++export PROTON_ENABLE_NVAPI=1
++
++# MangoHud configuration
++export MANGOHUD_CONFIG="cpu_temp,gpu_temp,ram,vram,frametime,position=top-right"
++export MANGOHUD_CONFIGFILE="/etc/mangohud/MangoHud.conf"
++
++# Create necessary directories
++mkdir -p "${WORKSPACE}/.wine"
++mkdir -p "${WORKSPACE}/.proton"
++mkdir -p "${WORKSPACE}/.local/share/Steam/compatibilitytools.d"
++mkdir -p "${WORKSPACE}/.config/MangoHud"
++
++# Link Proton GE to user's Steam directory if needed
++if [ ! -e "${WORKSPACE}/.local/share/Steam/compatibilitytools.d/GE-Proton10-3" ]; then
++    ln -sf /opt/steam/compatibilitytools.d/GE-Proton10-3 "${WORKSPACE}/.local/share/Steam/compatibilitytools.d/"
++fi
++
++# Copy MangoHud config to user directory if not exists
++if [ ! -f "${WORKSPACE}/.config/MangoHud/MangoHud.conf" ]; then
++    cp /etc/mangohud/MangoHud.conf "${WORKSPACE}/.config/MangoHud/"
++fi
++
++# Initialize wine prefix if it doesn't exist
++if [ ! -f "${WINEPREFIX}/system.reg" ]; then
++    echo "Initializing Wine prefix at ${WINEPREFIX}..."
++    ${WINE} wineboot -u
++fi
++
++# Set proper permissions
++chown -R ${WORKSPACE_USER}:${WORKSPACE_USER} "${WORKSPACE}/.wine" 2>/dev/null || true
++chown -R ${WORKSPACE_USER}:${WORKSPACE_USER} "${WORKSPACE}/.proton" 2>/dev/null || true
++chown -R ${WORKSPACE_USER}:${WORKSPACE_USER} "${WORKSPACE}/.local" 2>/dev/null || true
++chown -R ${WORKSPACE_USER}:${WORKSPACE_USER} "${WORKSPACE}/.config" 2>/dev/null || true
++
++# Write environment to file for other processes
++cat > /opt/ai-dock/etc/proton.env << EOF
++export PROTON_DIR="${PROTON_DIR}"
++export PATH="${PROTON_DIR}/files/bin:\${PATH}"
++export WINE="${WINE}"
++export WINEPREFIX="${WINEPREFIX}"
++export WINEDLLOVERRIDES="${WINEDLLOVERRIDES}"
++export WINEARCH="${WINEARCH}"
++export VK_ICD_FILENAMES="${VK_ICD_FILENAMES}"
++export VK_LAYER_PATH="${VK_LAYER_PATH}"
++export PROTON_USE_WINED3D11=${PROTON_USE_WINED3D11}
++export PROTON_NO_ESYNC=${PROTON_NO_ESYNC}
++export PROTON_NO_FSYNC=${PROTON_NO_FSYNC}
++export PROTON_HIDE_NVIDIA_GPU=${PROTON_HIDE_NVIDIA_GPU}
++export PROTON_ENABLE_NVAPI=${PROTON_ENABLE_NVAPI}
++export MANGOHUD_CONFIG="${MANGOHUD_CONFIG}"
++export MANGOHUD_CONFIGFILE="${MANGOHUD_CONFIGFILE}"
++EOF
++
++echo "Proton GE environment initialized successfully"
++echo "Wine prefix: ${WINEPREFIX}"
++echo "Proton version: $(${PROTON_DIR}/proton --version 2>/dev/null || echo 'GE-Proton10-3')"
+\ No newline at end of file
+diff --git a/build/COPY_ROOT_PROTON/opt/ai-dock/bin/test-proton.sh b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/test-proton.sh
+new file mode 100755
+index 0000000..65e8bf9
+--- /dev/null
++++ b/build/COPY_ROOT_PROTON/opt/ai-dock/bin/test-proton.sh
+@@ -0,0 +1,136 @@
++#!/bin/bash
++# Test script to validate Proton GE installation
++# Runs various checks to ensure everything is working correctly
++
++set -e
++
++echo "=== Proton GE Installation Test ==="
++echo
++
++# Source Proton environment
++if [ -f /opt/ai-dock/etc/proton.env ]; then
++    source /opt/ai-dock/etc/proton.env
++    echo "✓ Proton environment sourced successfully"
++else
++    echo "✗ Proton environment not found"
++    exit 1
++fi
++
++# Check Wine installation
++echo
++echo "Checking Wine installation..."
++if command -v wine &> /dev/null; then
++    echo "✓ Wine installed: $(wine --version)"
++else
++    echo "✗ Wine not found"
++    exit 1
++fi
++
++if command -v wine64 &> /dev/null; then
++    echo "✓ Wine64 installed: $(wine64 --version)"
++else
++    echo "✗ Wine64 not found"
++    exit 1
++fi
++
++# Check Proton GE installation
++echo
++echo "Checking Proton GE installation..."
++if [ -d "/opt/proton-ge/current" ]; then
++    echo "✓ Proton GE directory exists"
++    if [ -f "/opt/proton-ge/current/proton" ]; then
++        echo "✓ Proton executable found"
++        # Try to get version
++        if [ -f "/opt/proton-ge/current/version" ]; then
++            echo "✓ Proton version: $(cat /opt/proton-ge/current/version)"
++        else
++            echo "✓ Proton version: GE-Proton10-3"
++        fi
++    else
++        echo "✗ Proton executable not found"
++        exit 1
++    fi
++else
++    echo "✗ Proton GE directory not found"
++    exit 1
++fi
++
++# Check 32-bit support
++echo
++echo "Checking 32-bit architecture support..."
++if dpkg --print-foreign-architectures | grep -q i386; then
++    echo "✓ 32-bit architecture enabled"
++else
++    echo "✗ 32-bit architecture not enabled"
++    exit 1
++fi
++
++# Check Vulkan support
++echo
++echo "Checking Vulkan support..."
++if command -v vulkaninfo &> /dev/null; then
++    echo "✓ Vulkan tools installed"
++    # Check for Vulkan drivers
++    if vulkaninfo --summary &> /dev/null; then
++        echo "✓ Vulkan drivers functional"
++    else
++        echo "⚠ Vulkan drivers may not be properly configured"
++    fi
++else
++    echo "✗ Vulkan tools not found"
++fi
++
++# Check Python tools
++echo
++echo "Checking Python tools..."
++if command -v protontricks &> /dev/null; then
++    echo "✓ Protontricks installed"
++else
++    echo "✗ Protontricks not found"
++fi
++
++# Check gaming utilities
++echo
++echo "Checking gaming utilities..."
++if command -v gamemoded &> /dev/null; then
++    echo "✓ GameMode installed"
++else
++    echo "✗ GameMode not found"
++fi
++
++if command -v mangohud &> /dev/null; then
++    echo "✓ MangoHud installed"
++else
++    echo "✗ MangoHud not found"
++fi
++
++# Check directories
++echo
++echo "Checking user directories..."
++dirs_to_check=(
++    "${WORKSPACE}/.wine"
++    "${WORKSPACE}/.proton"
++    "${WORKSPACE}/.local/share/Steam/compatibilitytools.d"
++    "${WORKSPACE}/.config/MangoHud"
++)
++
++for dir in "${dirs_to_check[@]}"; do
++    if [ -d "$dir" ]; then
++        echo "✓ Directory exists: $dir"
++    else
++        echo "✗ Directory missing: $dir"
++    fi
++done
++
++# Summary
++echo
++echo "=== Test Summary ==="
++echo "All critical components are installed and configured."
++echo "You can now run Windows applications using:"
++echo "  - proton run <executable>"
++echo "  - proton-wine <executable>"
++echo "  - wine <executable> (system Wine)"
++echo
++echo "To enable performance monitoring, prefix commands with:"
++echo "  - MANGOHUD=1 <command>"
++echo "  - gamemoderun <command>"
+\ No newline at end of file
+diff --git a/build/Dockerfile b/build/Dockerfile
+index 3dcf56e..432e415 100644
+--- a/build/Dockerfile
++++ b/build/Dockerfile
+@@ -44,7 +44,7 @@ ENV DISPLAY_REFRESH 60
+ ENV DISPLAY_DPI 96
+ ENV DISPLAY_CDEPTH 24
+ 
+-ARG SELKIES_VERSION=1.6.1
++ARG SELKIES_VERSION=1.6.2
+ ENV SELKIES_VERSION=${SELKIES_VERSION}
+ ENV SELKIES_ENCODER nvh264enc
+ ENV SELKIES_ENABLE_RESIZE false
+@@ -70,6 +70,13 @@ ENV APPIMAGE_EXTRACT_AND_RUN 1
+ ARG WINE_BRANCH=staging
+ ENV WINE_BRANCH=${WINE_BRANCH}
+ 
++# Proton GE environment variables
++ARG ENABLE_PROTON_GE=true
++ENV ENABLE_PROTON_GE=${ENABLE_PROTON_GE}
++ENV PROTON_VERSION=GE-Proton10-3
++ENV ENABLE_GAMEMODE=false
++ENV ENABLE_MANGOHUD=true
++
+ # Copy early so we can use scripts in the build - Changes to these files will invalidate the cache and cause a rebuild.
+ COPY --chown=0:1111 ./COPY_ROOT_0/ /
+ 
+@@ -81,9 +88,21 @@ ENV IMAGE_SLUG="linux-desktop"
+ 
+ RUN set -eo pipefail && /opt/ai-dock/bin/build/layer0/init.sh | tee /var/log/build.log
+ 
++# Proton GE Layer - only installed if ENABLE_PROTON_GE is true
++COPY --chown=0:1111 ./COPY_ROOT_PROTON/ /
++RUN if [ "${ENABLE_PROTON_GE}" = "true" ]; then \
++    set -eo pipefail && \
++    /opt/ai-dock/bin/build/install_proton_base.sh | tee -a /var/log/build.log && \
++    /opt/ai-dock/bin/build/install_proton_ge.sh | tee -a /var/log/build.log && \
++    /opt/ai-dock/bin/build/install_python_deps.sh | tee -a /var/log/build.log && \
++    /opt/ai-dock/bin/build/install_gaming_utils.sh | tee -a /var/log/build.log && \
++    apt-get clean && \
++    rm -rf /var/lib/apt/lists/*; \
++    fi
++
+ # Copy overrides and new files into a final layer for fast rebuilds. Uncomment below
+ COPY --chown=0:1111 ./COPY_ROOT_99/ /
+ RUN set -eo pipefail && /opt/ai-dock/bin/build/layer99/init.sh | tee -a /var/log/build.log
+ 
+ # Keep init.sh as-is and place additional logic in /opt/ai-dock/bin/preflight.sh
+-CMD ["init.sh"]
++CMD ["init.sh"]
+\ No newline at end of file
+diff --git a/proton-ge-integration.diff b/proton-ge-integration.diff
+new file mode 100644
+index 0000000..ec25504
+--- /dev/null
++++ b/proton-ge-integration.diff
+@@ -0,0 +1,188 @@
++diff --git a/.github/workflows/docker-build.yml b/.github/workflows/docker-build.yml
++index 81f893c..613ef5c 100644
++--- a/.github/workflows/docker-build.yml
+++++ b/.github/workflows/docker-build.yml
++@@ -16,7 +16,8 @@ jobs:
++       fail-fast: false
++       matrix:
++         build:
++-          - {latest: "false", selkies: "1.6.2"}
+++          - {latest: "false", selkies: "1.6.2", proton: "false"}
+++          - {latest: "false", selkies: "1.6.2", proton: "true"}
++     steps:
++       -
++         name: Free Space
++@@ -58,7 +59,7 @@ jobs:
++         name: Set tags
++         run: |
++           img_path_ghcr="ghcr.io/${{ env.REPO_NAMESPACE }}/${{ env.REPO_NAME }}"
++-          img_path_dhub="${{ vars.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-cpu"
+++          img_path_dhub="${{ vars.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-cpu$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
++           
++           if [[ -z ${{ matrix.build.selkies }} || ${{ matrix.build.selkies }} == "latest"  ]]; then
++               SELKIES_VERSION="$(curl -fsSL "https://api.github.com/repos/selkies-project/selkies-gstreamer/releases/latest" | jq -r '.tag_name' | sed 's/[^0-9\.\-]*//g')"
++@@ -68,12 +69,12 @@ jobs:
++           [[ -n $SELKIES_VERSION ]] || { echo "Error: SELKIES_VERSION is empty. Exiting script." >&2; exit 1; }
++           echo "SELKIES_VERSION=${SELKIES_VERSION}" >> ${GITHUB_ENV}
++ 
++-          base_tag="v2-cpu-${{ env.UBUNTU_VERSION }}"
+++          base_tag="v2-cpu-${{ env.UBUNTU_VERSION }}$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
++ 
++           if [[ ${{ matrix.build.latest }} == "true" ]]; then
++                 echo "Marking latest"
++                 # GHCR.io Tags
++-                TAGS="${img_path_ghcr}:${base_tag}, ${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest-cpu"
+++                TAGS="${img_path_ghcr}:${base_tag}, ${img_path_ghcr}:${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest-cpu$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
++                 # Docker.io Tags
++                 TAGS="${TAGS}, ${img_path_dhub}:${SELKIES_VERSION}-ubuntu-${{ env.UBUNTU_VERSION }}, ${img_path_dhub}:latest"
++             else
++@@ -87,6 +88,8 @@ jobs:
++           context: build
++           build-args: |
++             IMAGE_BASE=ghcr.io/ai-dock/base-image:v2-cpu-${{ env.UBUNTU_VERSION }}
+++            ENABLE_PROTON_GE=${{ matrix.build.proton }}
+++            SELKIES_VERSION=${{ env.SELKIES_VERSION }}
++           push: true
++           # Avoids unknown/unknown architecture and extra metadata
++           provenance: false
++@@ -98,8 +101,10 @@ jobs:
++       fail-fast: false
++       matrix:
++         build:
++-          - {latest: "false", selkies: "1.6.2", cuda: "12.1.1-cudnn8-runtime"}
++-          - {latest: "false", selkies: "1.6.2", cuda: "12.1.1-cudnn8-devel"}
+++          - {latest: "false", selkies: "1.6.2", cuda: "12.1.1-cudnn8-runtime", proton: "false"}
+++          - {latest: "false", selkies: "1.6.2", cuda: "12.1.1-cudnn8-runtime", proton: "true"}
+++          # Devel builds commented due to size constraints
+++          #- {latest: "false", selkies: "1.6.2", cuda: "12.1.1-cudnn8-devel", proton: "false"}
++     steps:
++       -
++         name: Free Space
++@@ -141,7 +146,7 @@ jobs:
++         name: Set tags
++         run: |
++           img_path_ghcr="ghcr.io/${{ env.REPO_NAMESPACE }}/${{ env.REPO_NAME }}"
++-          img_path_dhub="${{ vars.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-cuda"
+++          img_path_dhub="${{ vars.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-cuda$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
++           
++           if [[ -z ${{ matrix.build.selkies }} || ${{ matrix.build.selkies }} == "latest"  ]]; then
++               SELKIES_VERSION="$(curl -fsSL "https://api.github.com/repos/selkies-project/selkies-gstreamer/releases/latest" | jq -r '.tag_name' | sed 's/[^0-9\.\-]*//g')"
++@@ -151,12 +156,12 @@ jobs:
++           [[ -n $SELKIES_VERSION ]] || { echo "Error: SELKIES_VERSION is empty. Exiting script." >&2; exit 1; }
++           echo "SELKIES_VERSION=${SELKIES_VERSION}" >> ${GITHUB_ENV}
++           
++-          base_tag="v2-cuda-${{ matrix.build.cuda }}-${{ env.UBUNTU_VERSION }}"
+++          base_tag="v2-cuda-${{ matrix.build.cuda }}-${{ env.UBUNTU_VERSION }}$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
++ 
++           if [[ ${{ matrix.build.latest }} == "true" ]]; then
++                 echo "Marking latest"
++                 # GHCR.io Tags
++-                TAGS="${img_path_ghcr}:${base_tag}, ${img_path_ghcr}:${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest, ${img_path_ghcr}:latest-cuda"
+++                TAGS="${img_path_ghcr}:${base_tag}, ${img_path_ghcr}:${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo ""), ${img_path_ghcr}:latest-cuda$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
++                 # Docker.io Tags
++                 TAGS="${TAGS}, ${img_path_dhub}:v${SELKIES_VERSION}-${{ matrix.build.cuda }}, ${img_path_dhub}:latest"
++             else
++@@ -170,6 +175,8 @@ jobs:
++           context: build
++           build-args: |
++             IMAGE_BASE=ghcr.io/ai-dock/base-image:v2-cuda-${{ matrix.build.cuda }}-${{ env.UBUNTU_VERSION }}
+++            ENABLE_PROTON_GE=${{ matrix.build.proton }}
+++            SELKIES_VERSION=${{ env.SELKIES_VERSION }}
++           push: true
++           provenance: false
++           tags: ${{ env.TAGS }}
++@@ -180,7 +187,9 @@ jobs:
++       fail-fast: false
++       matrix:
++         build:
++-          - {latest: "false", selkies: "1.6.2", rocm: "6.0-runtime"}
+++          - {latest: "false", selkies: "1.6.2", rocm: "6.0-runtime", proton: "false"}
+++          # ROCm with Proton commented due to size constraints
+++          #- {latest: "false", selkies: "1.6.2", rocm: "6.0-runtime", proton: "true"}
++     steps:
++       -
++         name: Free Space
++@@ -222,7 +231,7 @@ jobs:
++         name: Set tags
++         run: |
++           img_path_ghcr="ghcr.io/${{ env.REPO_NAMESPACE }}/${{ env.REPO_NAME }}"
++-          img_path_dhub="${{ vars.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-rocm"
+++          img_path_dhub="${{ vars.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-rocm$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
++           
++           if [[ -z ${{ matrix.build.selkies }} || ${{ matrix.build.selkies }} == "latest"  ]]; then
++               SELKIES_VERSION="$(curl -fsSL "https://api.github.com/repos/selkies-project/selkies-gstreamer/releases/latest" | jq -r '.tag_name' | sed 's/[^0-9\.\-]*//g')"
++@@ -232,12 +241,12 @@ jobs:
++           [[ -n $SELKIES_VERSION ]] || { echo "Error: SELKIES_VERSION is empty. Exiting script." >&2; exit 1; }
++           echo "SELKIES_VERSION=${SELKIES_VERSION}" >> ${GITHUB_ENV}
++ 
++-          base_tag="v2-cuda-${{ matrix.build.rocm }}-${{ env.UBUNTU_VERSION }}"
+++          base_tag="v2-rocm-${{ matrix.build.rocm }}-${{ env.UBUNTU_VERSION }}$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
++ 
++           if [[ ${{ matrix.build.latest }} == "true" ]]; then
++                 echo "Marking latest"
++                 # GHCR.io Tags
++-                TAGS="${img_path_ghcr}:${base_tag}, ${img_path_ghcr}:${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest-rocm"
+++                TAGS="${img_path_ghcr}:${base_tag}, ${img_path_ghcr}:${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest-rocm$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
++                 # Docker.io Tags
++                 TAGS="${TAGS}, ${img_path_dhub}:v${SELKIES_VERSION}-${{ matrix.build.rocm }}, ${img_path_dhub}:latest"
++             else
++@@ -251,6 +260,8 @@ jobs:
++           context: build
++           build-args: |
++             IMAGE_BASE=ghcr.io/ai-dock/base-image:v2-rocm-${{ matrix.build.rocm }}-${{ env.UBUNTU_VERSION }}
+++            ENABLE_PROTON_GE=${{ matrix.build.proton }}
+++            SELKIES_VERSION=${{ env.SELKIES_VERSION }}
++           push: true
++           provenance: false
++           tags: ${{ env.TAGS }}
++diff --git a/build/Dockerfile b/build/Dockerfile
++index 3dcf56e..432e415 100644
++--- a/build/Dockerfile
+++++ b/build/Dockerfile
++@@ -44,7 +44,7 @@ ENV DISPLAY_REFRESH 60
++ ENV DISPLAY_DPI 96
++ ENV DISPLAY_CDEPTH 24
++ 
++-ARG SELKIES_VERSION=1.6.1
+++ARG SELKIES_VERSION=1.6.2
++ ENV SELKIES_VERSION=${SELKIES_VERSION}
++ ENV SELKIES_ENCODER nvh264enc
++ ENV SELKIES_ENABLE_RESIZE false
++@@ -70,6 +70,13 @@ ENV APPIMAGE_EXTRACT_AND_RUN 1
++ ARG WINE_BRANCH=staging
++ ENV WINE_BRANCH=${WINE_BRANCH}
++ 
+++# Proton GE environment variables
+++ARG ENABLE_PROTON_GE=true
+++ENV ENABLE_PROTON_GE=${ENABLE_PROTON_GE}
+++ENV PROTON_VERSION=GE-Proton10-3
+++ENV ENABLE_GAMEMODE=false
+++ENV ENABLE_MANGOHUD=true
+++
++ # Copy early so we can use scripts in the build - Changes to these files will invalidate the cache and cause a rebuild.
++ COPY --chown=0:1111 ./COPY_ROOT_0/ /
++ 
++@@ -81,9 +88,21 @@ ENV IMAGE_SLUG="linux-desktop"
++ 
++ RUN set -eo pipefail && /opt/ai-dock/bin/build/layer0/init.sh | tee /var/log/build.log
++ 
+++# Proton GE Layer - only installed if ENABLE_PROTON_GE is true
+++COPY --chown=0:1111 ./COPY_ROOT_PROTON/ /
+++RUN if [ "${ENABLE_PROTON_GE}" = "true" ]; then \
+++    set -eo pipefail && \
+++    /opt/ai-dock/bin/build/install_proton_base.sh | tee -a /var/log/build.log && \
+++    /opt/ai-dock/bin/build/install_proton_ge.sh | tee -a /var/log/build.log && \
+++    /opt/ai-dock/bin/build/install_python_deps.sh | tee -a /var/log/build.log && \
+++    /opt/ai-dock/bin/build/install_gaming_utils.sh | tee -a /var/log/build.log && \
+++    apt-get clean && \
+++    rm -rf /var/lib/apt/lists/*; \
+++    fi
+++
++ # Copy overrides and new files into a final layer for fast rebuilds. Uncomment below
++ COPY --chown=0:1111 ./COPY_ROOT_99/ /
++ RUN set -eo pipefail && /opt/ai-dock/bin/build/layer99/init.sh | tee -a /var/log/build.log
++ 
++ # Keep init.sh as-is and place additional logic in /opt/ai-dock/bin/preflight.sh
++-CMD ["init.sh"]
+++CMD ["init.sh"]
++\ No newline at end of file
diff --git a/proton-ge-integration.diff b/proton-ge-integration.diff
new file mode 100644
index 0000000..ec25504
--- /dev/null
+++ b/proton-ge-integration.diff
@@ -0,0 +1,188 @@
+diff --git a/.github/workflows/docker-build.yml b/.github/workflows/docker-build.yml
+index 81f893c..613ef5c 100644
+--- a/.github/workflows/docker-build.yml
++++ b/.github/workflows/docker-build.yml
+@@ -16,7 +16,8 @@ jobs:
+       fail-fast: false
+       matrix:
+         build:
+-          - {latest: "false", selkies: "1.6.2"}
++          - {latest: "false", selkies: "1.6.2", proton: "false"}
++          - {latest: "false", selkies: "1.6.2", proton: "true"}
+     steps:
+       -
+         name: Free Space
+@@ -58,7 +59,7 @@ jobs:
+         name: Set tags
+         run: |
+           img_path_ghcr="ghcr.io/${{ env.REPO_NAMESPACE }}/${{ env.REPO_NAME }}"
+-          img_path_dhub="${{ vars.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-cpu"
++          img_path_dhub="${{ vars.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-cpu$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
+           
+           if [[ -z ${{ matrix.build.selkies }} || ${{ matrix.build.selkies }} == "latest"  ]]; then
+               SELKIES_VERSION="$(curl -fsSL "https://api.github.com/repos/selkies-project/selkies-gstreamer/releases/latest" | jq -r '.tag_name' | sed 's/[^0-9\.\-]*//g')"
+@@ -68,12 +69,12 @@ jobs:
+           [[ -n $SELKIES_VERSION ]] || { echo "Error: SELKIES_VERSION is empty. Exiting script." >&2; exit 1; }
+           echo "SELKIES_VERSION=${SELKIES_VERSION}" >> ${GITHUB_ENV}
+ 
+-          base_tag="v2-cpu-${{ env.UBUNTU_VERSION }}"
++          base_tag="v2-cpu-${{ env.UBUNTU_VERSION }}$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
+ 
+           if [[ ${{ matrix.build.latest }} == "true" ]]; then
+                 echo "Marking latest"
+                 # GHCR.io Tags
+-                TAGS="${img_path_ghcr}:${base_tag}, ${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest-cpu"
++                TAGS="${img_path_ghcr}:${base_tag}, ${img_path_ghcr}:${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest-cpu$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
+                 # Docker.io Tags
+                 TAGS="${TAGS}, ${img_path_dhub}:${SELKIES_VERSION}-ubuntu-${{ env.UBUNTU_VERSION }}, ${img_path_dhub}:latest"
+             else
+@@ -87,6 +88,8 @@ jobs:
+           context: build
+           build-args: |
+             IMAGE_BASE=ghcr.io/ai-dock/base-image:v2-cpu-${{ env.UBUNTU_VERSION }}
++            ENABLE_PROTON_GE=${{ matrix.build.proton }}
++            SELKIES_VERSION=${{ env.SELKIES_VERSION }}
+           push: true
+           # Avoids unknown/unknown architecture and extra metadata
+           provenance: false
+@@ -98,8 +101,10 @@ jobs:
+       fail-fast: false
+       matrix:
+         build:
+-          - {latest: "false", selkies: "1.6.2", cuda: "12.1.1-cudnn8-runtime"}
+-          - {latest: "false", selkies: "1.6.2", cuda: "12.1.1-cudnn8-devel"}
++          - {latest: "false", selkies: "1.6.2", cuda: "12.1.1-cudnn8-runtime", proton: "false"}
++          - {latest: "false", selkies: "1.6.2", cuda: "12.1.1-cudnn8-runtime", proton: "true"}
++          # Devel builds commented due to size constraints
++          #- {latest: "false", selkies: "1.6.2", cuda: "12.1.1-cudnn8-devel", proton: "false"}
+     steps:
+       -
+         name: Free Space
+@@ -141,7 +146,7 @@ jobs:
+         name: Set tags
+         run: |
+           img_path_ghcr="ghcr.io/${{ env.REPO_NAMESPACE }}/${{ env.REPO_NAME }}"
+-          img_path_dhub="${{ vars.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-cuda"
++          img_path_dhub="${{ vars.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-cuda$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
+           
+           if [[ -z ${{ matrix.build.selkies }} || ${{ matrix.build.selkies }} == "latest"  ]]; then
+               SELKIES_VERSION="$(curl -fsSL "https://api.github.com/repos/selkies-project/selkies-gstreamer/releases/latest" | jq -r '.tag_name' | sed 's/[^0-9\.\-]*//g')"
+@@ -151,12 +156,12 @@ jobs:
+           [[ -n $SELKIES_VERSION ]] || { echo "Error: SELKIES_VERSION is empty. Exiting script." >&2; exit 1; }
+           echo "SELKIES_VERSION=${SELKIES_VERSION}" >> ${GITHUB_ENV}
+           
+-          base_tag="v2-cuda-${{ matrix.build.cuda }}-${{ env.UBUNTU_VERSION }}"
++          base_tag="v2-cuda-${{ matrix.build.cuda }}-${{ env.UBUNTU_VERSION }}$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
+ 
+           if [[ ${{ matrix.build.latest }} == "true" ]]; then
+                 echo "Marking latest"
+                 # GHCR.io Tags
+-                TAGS="${img_path_ghcr}:${base_tag}, ${img_path_ghcr}:${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest, ${img_path_ghcr}:latest-cuda"
++                TAGS="${img_path_ghcr}:${base_tag}, ${img_path_ghcr}:${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo ""), ${img_path_ghcr}:latest-cuda$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
+                 # Docker.io Tags
+                 TAGS="${TAGS}, ${img_path_dhub}:v${SELKIES_VERSION}-${{ matrix.build.cuda }}, ${img_path_dhub}:latest"
+             else
+@@ -170,6 +175,8 @@ jobs:
+           context: build
+           build-args: |
+             IMAGE_BASE=ghcr.io/ai-dock/base-image:v2-cuda-${{ matrix.build.cuda }}-${{ env.UBUNTU_VERSION }}
++            ENABLE_PROTON_GE=${{ matrix.build.proton }}
++            SELKIES_VERSION=${{ env.SELKIES_VERSION }}
+           push: true
+           provenance: false
+           tags: ${{ env.TAGS }}
+@@ -180,7 +187,9 @@ jobs:
+       fail-fast: false
+       matrix:
+         build:
+-          - {latest: "false", selkies: "1.6.2", rocm: "6.0-runtime"}
++          - {latest: "false", selkies: "1.6.2", rocm: "6.0-runtime", proton: "false"}
++          # ROCm with Proton commented due to size constraints
++          #- {latest: "false", selkies: "1.6.2", rocm: "6.0-runtime", proton: "true"}
+     steps:
+       -
+         name: Free Space
+@@ -222,7 +231,7 @@ jobs:
+         name: Set tags
+         run: |
+           img_path_ghcr="ghcr.io/${{ env.REPO_NAMESPACE }}/${{ env.REPO_NAME }}"
+-          img_path_dhub="${{ vars.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-rocm"
++          img_path_dhub="${{ vars.DOCKERHUB_USER }}/${{ env.REPO_NAME }}-rocm$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
+           
+           if [[ -z ${{ matrix.build.selkies }} || ${{ matrix.build.selkies }} == "latest"  ]]; then
+               SELKIES_VERSION="$(curl -fsSL "https://api.github.com/repos/selkies-project/selkies-gstreamer/releases/latest" | jq -r '.tag_name' | sed 's/[^0-9\.\-]*//g')"
+@@ -232,12 +241,12 @@ jobs:
+           [[ -n $SELKIES_VERSION ]] || { echo "Error: SELKIES_VERSION is empty. Exiting script." >&2; exit 1; }
+           echo "SELKIES_VERSION=${SELKIES_VERSION}" >> ${GITHUB_ENV}
+ 
+-          base_tag="v2-cuda-${{ matrix.build.rocm }}-${{ env.UBUNTU_VERSION }}"
++          base_tag="v2-rocm-${{ matrix.build.rocm }}-${{ env.UBUNTU_VERSION }}$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
+ 
+           if [[ ${{ matrix.build.latest }} == "true" ]]; then
+                 echo "Marking latest"
+                 # GHCR.io Tags
+-                TAGS="${img_path_ghcr}:${base_tag}, ${img_path_ghcr}:${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest-rocm"
++                TAGS="${img_path_ghcr}:${base_tag}, ${img_path_ghcr}:${base_tag}-v${SELKIES_VERSION}, ${img_path_ghcr}:latest-rocm$([[ ${{ matrix.build.proton }} == "true" ]] && echo "-proton" || echo "")"
+                 # Docker.io Tags
+                 TAGS="${TAGS}, ${img_path_dhub}:v${SELKIES_VERSION}-${{ matrix.build.rocm }}, ${img_path_dhub}:latest"
+             else
+@@ -251,6 +260,8 @@ jobs:
+           context: build
+           build-args: |
+             IMAGE_BASE=ghcr.io/ai-dock/base-image:v2-rocm-${{ matrix.build.rocm }}-${{ env.UBUNTU_VERSION }}
++            ENABLE_PROTON_GE=${{ matrix.build.proton }}
++            SELKIES_VERSION=${{ env.SELKIES_VERSION }}
+           push: true
+           provenance: false
+           tags: ${{ env.TAGS }}
+diff --git a/build/Dockerfile b/build/Dockerfile
+index 3dcf56e..432e415 100644
+--- a/build/Dockerfile
++++ b/build/Dockerfile
+@@ -44,7 +44,7 @@ ENV DISPLAY_REFRESH 60
+ ENV DISPLAY_DPI 96
+ ENV DISPLAY_CDEPTH 24
+ 
+-ARG SELKIES_VERSION=1.6.1
++ARG SELKIES_VERSION=1.6.2
+ ENV SELKIES_VERSION=${SELKIES_VERSION}
+ ENV SELKIES_ENCODER nvh264enc
+ ENV SELKIES_ENABLE_RESIZE false
+@@ -70,6 +70,13 @@ ENV APPIMAGE_EXTRACT_AND_RUN 1
+ ARG WINE_BRANCH=staging
+ ENV WINE_BRANCH=${WINE_BRANCH}
+ 
++# Proton GE environment variables
++ARG ENABLE_PROTON_GE=true
++ENV ENABLE_PROTON_GE=${ENABLE_PROTON_GE}
++ENV PROTON_VERSION=GE-Proton10-3
++ENV ENABLE_GAMEMODE=false
++ENV ENABLE_MANGOHUD=true
++
+ # Copy early so we can use scripts in the build - Changes to these files will invalidate the cache and cause a rebuild.
+ COPY --chown=0:1111 ./COPY_ROOT_0/ /
+ 
+@@ -81,9 +88,21 @@ ENV IMAGE_SLUG="linux-desktop"
+ 
+ RUN set -eo pipefail && /opt/ai-dock/bin/build/layer0/init.sh | tee /var/log/build.log
+ 
++# Proton GE Layer - only installed if ENABLE_PROTON_GE is true
++COPY --chown=0:1111 ./COPY_ROOT_PROTON/ /
++RUN if [ "${ENABLE_PROTON_GE}" = "true" ]; then \
++    set -eo pipefail && \
++    /opt/ai-dock/bin/build/install_proton_base.sh | tee -a /var/log/build.log && \
++    /opt/ai-dock/bin/build/install_proton_ge.sh | tee -a /var/log/build.log && \
++    /opt/ai-dock/bin/build/install_python_deps.sh | tee -a /var/log/build.log && \
++    /opt/ai-dock/bin/build/install_gaming_utils.sh | tee -a /var/log/build.log && \
++    apt-get clean && \
++    rm -rf /var/lib/apt/lists/*; \
++    fi
++
+ # Copy overrides and new files into a final layer for fast rebuilds. Uncomment below
+ COPY --chown=0:1111 ./COPY_ROOT_99/ /
+ RUN set -eo pipefail && /opt/ai-dock/bin/build/layer99/init.sh | tee -a /var/log/build.log
+ 
+ # Keep init.sh as-is and place additional logic in /opt/ai-dock/bin/preflight.sh
+-CMD ["init.sh"]
++CMD ["init.sh"]
+\ No newline at end of file
